/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SUBUI;

import COMMONFUN.CommonFun;
import COMMONFUN.TblCellColour;
import CONTROLLERS.C_GroupCommon;
import CONTROLLERS.C_Locations;
import CONTROLLERS.C_Products;
import CONTROLLERS.C_Units;
import DB_ACCESS.DB;
import FOCUS_TRAVERSAL.MyFocusTraversalPolicy;
import MAIN.Frm_Main;
import MODELS.MLocation;
import MODELS.MProducts;
import MODELS.MStocks;
import MODELS.MUnits;
import MODELS.TPhystkdet;
import MODELS.TStockline;
import UI.Frm_Table;
import VALIDATIONS.MyValidator;
import WINMNG.MyWindowBasicControllers;
import java.awt.Color;
import java.awt.Component;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperReport;

/**
 *
 * @author HOME
 */
public class Frm_TPhyStock extends javax.swing.JInternalFrame implements MyWindowBasicControllers {

    int focusNumber = 0;

    int itemcodeFocusNo = 0;

    JComponent[] focusList = null;
    Frm_Table ft = null;

    Frm_Main mainW = null;
    MyValidator fv = null;

    C_Locations C_Loc = null;

    C_Products C_Pro = null;
    C_Units C_Units = null;
    C_GroupCommon c_Grp = null;

    ArrayList<JComponent> FocusingOrder = null;

    JasperReport jr = null;

    CommonFun cf = null;

    public Frm_TPhyStock(Frm_Main mainw, String ScreenName, ArrayList<TPhystkdet> ar) {
        initComponents();
        this.setTitle(ScreenName);
        this.lblScreenName.setText(ScreenName);
        this.mainW = mainw;
        this.fv = new MyValidator();

        this.C_Pro = new C_Products();
        this.C_Loc = new C_Locations();

        this.C_Units = new C_Units();

        this.c_Grp = new C_GroupCommon();
        this.FocusingOrder = new ArrayList<JComponent>();

        this.cf = new CommonFun();

        setShortCutKeys(this);

        LoadDetails(ar);

        tblTrn.setDefaultRenderer(Object.class, new TblCellColour());

        tblTrn.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table = (JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 2) {
                    LoadLine(tblTrn.getSelectedRow());
                }
            }
        });

        SetFocusTraversal();
        Refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        layout_TopActionPanel = new javax.swing.JPanel();
        but_TrnUpdate = new javax.swing.JButton();
        but_TrnSave = new javax.swing.JButton();
        but_TrnHold = new javax.swing.JButton();
        but_TrnRefresh = new javax.swing.JButton();
        lblScreenName = new javax.swing.JLabel();
        jpanelq = new javax.swing.JPanel();
        but_TrnSearch = new javax.swing.JButton();
        but_TrnCancel = new javax.swing.JButton();
        txt_State = new javax.swing.JLabel();
        but_TrnPrint = new javax.swing.JButton();
        layout_TopMsgPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lbl_TrnNo = new javax.swing.JLabel();
        txt_TrnNo = new javax.swing.JTextField();
        layout_LocationsPanel = new javax.swing.JPanel();
        cmb_SourceLoc = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        txt_LItemCode = new javax.swing.JTextField();
        txt_LQty = new javax.swing.JTextField();
        lbl_LItemCode = new javax.swing.JLabel();
        lbl_LQty = new javax.swing.JLabel();
        but_Add = new javax.swing.JButton();
        but_ItemSearch = new javax.swing.JButton();
        cmb_LUnit = new javax.swing.JComboBox();
        txt_LBatch = new javax.swing.JLabel();
        lbl_IsReturn = new javax.swing.JLabel();
        but_LineClear = new javax.swing.JButton();
        lbl_RefTrnNo = new javax.swing.JLabel();
        txt_SA = new javax.swing.JLabel();
        txt_SA_COM = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTrn = new javax.swing.JTable();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        lbl_Line_ProImg = new javax.swing.JLabel();
        txt_LProDes = new javax.swing.JLabel();
        lbl_IsLoad = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtImgPath = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("caption");
        setName(""); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        layout_TopActionPanel.setBackground(new java.awt.Color(204, 204, 204));
        layout_TopActionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        but_TrnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/edit.png"))); // NOI18N
        but_TrnUpdate.setToolTipText("Edit");
        but_TrnUpdate.setContentAreaFilled(false);
        but_TrnUpdate.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/edit_disable.png"))); // NOI18N
        but_TrnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnUpdateActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 40, 40));

        but_TrnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Save.png"))); // NOI18N
        but_TrnSave.setToolTipText("Save");
        but_TrnSave.setContentAreaFilled(false);
        but_TrnSave.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Save_disable.png"))); // NOI18N
        but_TrnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnSaveActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 40, 40));

        but_TrnHold.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/hold.png"))); // NOI18N
        but_TrnHold.setToolTipText("Hold(F6)");
        but_TrnHold.setContentAreaFilled(false);
        but_TrnHold.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/hold_disable.png"))); // NOI18N
        but_TrnHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnHoldActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnHold, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 40, 40));

        but_TrnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/refresh.png"))); // NOI18N
        but_TrnRefresh.setToolTipText("Refresh");
        but_TrnRefresh.setContentAreaFilled(false);
        but_TrnRefresh.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/refresh_disable.png"))); // NOI18N
        but_TrnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnRefreshActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 0, 40, 40));

        lblScreenName.setBackground(new java.awt.Color(153, 255, 51));
        lblScreenName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblScreenName.setText("caption");
        layout_TopActionPanel.add(lblScreenName, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 0, 190, 40));
        layout_TopActionPanel.add(jpanelq, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, 280, 40));

        but_TrnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Search.png"))); // NOI18N
        but_TrnSearch.setToolTipText("Search(F2)");
        but_TrnSearch.setContentAreaFilled(false);
        but_TrnSearch.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Search_disable.png"))); // NOI18N
        but_TrnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnSearchActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 40, 40));

        but_TrnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/if_352-Document_Remove_2124269.png"))); // NOI18N
        but_TrnCancel.setToolTipText("Cancel(F7)");
        but_TrnCancel.setContentAreaFilled(false);
        but_TrnCancel.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/hold_disable.png"))); // NOI18N
        but_TrnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnCancelActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, 40, 40));

        txt_State.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_State.setForeground(new java.awt.Color(255, 0, 0));
        txt_State.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_State.setText("jLabel2");
        layout_TopActionPanel.add(txt_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 200, 40));

        but_TrnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/if_print__outline__printer__document__office__computer__networkprinter_2318007 (1).png"))); // NOI18N
        but_TrnPrint.setToolTipText("Print(F8)");
        but_TrnPrint.setContentAreaFilled(false);
        but_TrnPrint.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/hold_disable.png"))); // NOI18N
        but_TrnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnPrintActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, 40, 40));

        jPanel1.add(layout_TopActionPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 40));

        layout_TopMsgPanel.setBackground(new java.awt.Color(255, 255, 204));
        layout_TopMsgPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setForeground(new java.awt.Color(153, 51, 0));
        jLabel5.setText("System will provide Auto Number for Code. So you need not to enter Code while creating  new Records");
        layout_TopMsgPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 790, 20));

        jPanel1.add(layout_TopMsgPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 870, 20));

        lbl_TrnNo.setText("No");
        jPanel1.add(lbl_TrnNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 40, 30));

        txt_TrnNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_TrnNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_TrnNoFocusLost(evt);
            }
        });
        txt_TrnNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_TrnNoActionPerformed(evt);
            }
        });
        jPanel1.add(txt_TrnNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 170, 30));

        layout_LocationsPanel.setBackground(new java.awt.Color(255, 255, 255));
        layout_LocationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Location "));
        layout_LocationsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmb_SourceLoc.setEnabled(false);
        layout_LocationsPanel.add(cmb_SourceLoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 180, 30));

        jPanel1.add(layout_LocationsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 60, 240, 70));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_LItemCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LItemCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LItemCodeFocusLost(evt);
            }
        });
        txt_LItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_LItemCodeActionPerformed(evt);
            }
        });
        jPanel2.add(txt_LItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 110, 30));

        txt_LQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LQtyFocusLost(evt);
            }
        });
        txt_LQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_LQtyActionPerformed(evt);
            }
        });
        txt_LQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_LQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_LQtyKeyTyped(evt);
            }
        });
        jPanel2.add(txt_LQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, 70, 30));

        lbl_LItemCode.setText("Item Code");
        jPanel2.add(lbl_LItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 110, -1));

        lbl_LQty.setText("Qty");
        jPanel2.add(lbl_LQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 70, -1));

        but_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/if_14_Add_106230.png"))); // NOI18N
        but_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_AddActionPerformed(evt);
            }
        });
        jPanel2.add(but_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 40, 40, 30));

        but_ItemSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/1480175721_Find01.png"))); // NOI18N
        but_ItemSearch.setToolTipText("Search(F2)");
        but_ItemSearch.setContentAreaFilled(false);
        but_ItemSearch.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Search_disable.png"))); // NOI18N
        but_ItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_ItemSearchActionPerformed(evt);
            }
        });
        jPanel2.add(but_ItemSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 30, 30));

        cmb_LUnit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_LUnitItemStateChanged(evt);
            }
        });
        cmb_LUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_LUnitActionPerformed(evt);
            }
        });
        jPanel2.add(cmb_LUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, 130, 30));
        jPanel2.add(txt_LBatch, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, 90, 20));
        jPanel2.add(lbl_IsReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 50, 20));

        but_LineClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/if_clear-left_9220.png"))); // NOI18N
        but_LineClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_LineClearActionPerformed(evt);
            }
        });
        jPanel2.add(but_LineClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 40, 40, 30));
        jPanel2.add(lbl_RefTrnNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 140, 20));
        jPanel2.add(txt_SA, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 0, 70, 20));
        jPanel2.add(txt_SA_COM, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 0, 70, 20));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 860, 70));

        tblTrn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Description", "Qty", "UnitSym", "Unit", "Batch"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTrn.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTrn.getTableHeader().setReorderingAllowed(false);
        tblTrn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTrnMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTrn);
        if (tblTrn.getColumnModel().getColumnCount() > 0) {
            tblTrn.getColumnModel().getColumn(0).setResizable(false);
            tblTrn.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblTrn.getColumnModel().getColumn(1).setResizable(false);
            tblTrn.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblTrn.getColumnModel().getColumn(2).setResizable(false);
            tblTrn.getColumnModel().getColumn(2).setPreferredWidth(10);
            tblTrn.getColumnModel().getColumn(3).setResizable(false);
            tblTrn.getColumnModel().getColumn(3).setPreferredWidth(10);
            tblTrn.getColumnModel().getColumn(4).setResizable(false);
            tblTrn.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblTrn.getColumnModel().getColumn(5).setResizable(false);
            tblTrn.getColumnModel().getColumn(5).setPreferredWidth(0);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 850, 350));

        jFormattedTextField1.setText("jFormattedTextField1");
        jPanel1.add(jFormattedTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 390, -1, -1));
        jPanel1.add(lbl_Line_ProImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 550, 90, 80));

        txt_LProDes.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txt_LProDes.setForeground(new java.awt.Color(0, 51, 204));
        txt_LProDes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255), 0));
        txt_LProDes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_LProDesMouseClicked(evt);
            }
        });
        jPanel1.add(txt_LProDes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 220, 40));

        lbl_IsLoad.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(lbl_IsLoad, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 600, 20, 20));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 630, 300, 10));

        txtImgPath.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(txtImgPath, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 180, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 640));

        setBounds(0, 0, 888, 666);
    }// </editor-fold>//GEN-END:initComponents

    private void but_TrnHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnHoldActionPerformed
        HoldProcess();
    }//GEN-LAST:event_but_TrnHoldActionPerformed

    private void but_TrnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_but_TrnRefreshActionPerformed

    private void but_TrnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnSaveActionPerformed
        SaveProcess();
    }//GEN-LAST:event_but_TrnSaveActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

    }//GEN-LAST:event_formInternalFrameOpened

    private void but_TrnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnUpdateActionPerformed
        EditMode();
    }//GEN-LAST:event_but_TrnUpdateActionPerformed

    private void but_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_AddActionPerformed
        addToTable(false);
    }//GEN-LAST:event_but_AddActionPerformed

    private void txt_LItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_LItemCodeActionPerformed
        loadProduct();
    }//GEN-LAST:event_txt_LItemCodeActionPerformed

    private void but_ItemSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_ItemSearchActionPerformed
        SearchModeItem();
    }//GEN-LAST:event_but_ItemSearchActionPerformed

    private void txt_LQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LQtyKeyTyped
        fv.validateforFloatingPoints(txt_LQty, evt, 3);
    }//GEN-LAST:event_txt_LQtyKeyTyped

    private void txt_LQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LQtyKeyReleased

    }//GEN-LAST:event_txt_LQtyKeyReleased

    private void tblTrnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTrnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblTrnMouseClicked

    private void cmb_LUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_LUnitActionPerformed

    }//GEN-LAST:event_cmb_LUnitActionPerformed

    private void cmb_LUnitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_LUnitItemStateChanged

    }//GEN-LAST:event_cmb_LUnitItemStateChanged

    private void txt_LQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_LQtyActionPerformed
        addToTable(false);
    }//GEN-LAST:event_txt_LQtyActionPerformed

    private void txt_LItemCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LItemCodeFocusGained
        txt_LItemCode.setBackground(Color.YELLOW);        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LItemCodeFocusGained

    private void txt_LItemCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LItemCodeFocusLost
        txt_LItemCode.setBackground(Color.WHITE);          // TODO add your handling code here:
    }//GEN-LAST:event_txt_LItemCodeFocusLost

    private void txt_LQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LQtyFocusGained
        if (!txt_LQty.getText().equals("") && Double.parseDouble(txt_LQty.getText()) == 0.0) {
            txt_LQty.setText("");
        }
        txt_LQty.setBackground(Color.YELLOW);          // TODO add your handling code here:
    }//GEN-LAST:event_txt_LQtyFocusGained

    private void txt_LQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LQtyFocusLost

        if (txt_LQty.getText().equals("")) {
            txt_LQty.setText("0.0");
        }
        txt_LQty.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_LQtyFocusLost

    private void txt_TrnNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_TrnNoFocusGained
        txt_TrnNo.setBackground(Color.YELLOW);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_TrnNoFocusGained

    private void txt_TrnNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_TrnNoFocusLost
        txt_TrnNo.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_TrnNoFocusLost

    private void but_TrnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnSearchActionPerformed
        SearchMode();        // TODO add your handling code here:
    }//GEN-LAST:event_but_TrnSearchActionPerformed

    private void txt_TrnNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_TrnNoActionPerformed


    }//GEN-LAST:event_txt_TrnNoActionPerformed

    private void but_TrnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnCancelActionPerformed

    }//GEN-LAST:event_but_TrnCancelActionPerformed

    private void but_TrnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnPrintActionPerformed

    }//GEN-LAST:event_but_TrnPrintActionPerformed

    private void but_LineClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_LineClearActionPerformed
        clearLine();
    }//GEN-LAST:event_but_LineClearActionPerformed

    private void txt_LProDesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_LProDesMouseClicked

        if (evt.getClickCount() == 2) {
            ProductImageLoad();
        }

    }//GEN-LAST:event_txt_LProDesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_Add;
    private javax.swing.JButton but_ItemSearch;
    private javax.swing.JButton but_LineClear;
    private javax.swing.JButton but_TrnCancel;
    private javax.swing.JButton but_TrnHold;
    private javax.swing.JButton but_TrnPrint;
    private javax.swing.JButton but_TrnRefresh;
    private javax.swing.JButton but_TrnSave;
    private javax.swing.JButton but_TrnSearch;
    private javax.swing.JButton but_TrnUpdate;
    private javax.swing.JComboBox cmb_LUnit;
    private javax.swing.JComboBox cmb_SourceLoc;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel jpanelq;
    private javax.swing.JPanel layout_LocationsPanel;
    private javax.swing.JPanel layout_TopActionPanel;
    private javax.swing.JPanel layout_TopMsgPanel;
    private javax.swing.JLabel lblScreenName;
    private javax.swing.JLabel lbl_IsLoad;
    private javax.swing.JLabel lbl_IsReturn;
    private javax.swing.JLabel lbl_LItemCode;
    private javax.swing.JLabel lbl_LQty;
    private javax.swing.JLabel lbl_Line_ProImg;
    private javax.swing.JLabel lbl_RefTrnNo;
    private javax.swing.JLabel lbl_TrnNo;
    private javax.swing.JTable tblTrn;
    private javax.swing.JLabel txtImgPath;
    private javax.swing.JLabel txt_LBatch;
    private javax.swing.JTextField txt_LItemCode;
    private javax.swing.JLabel txt_LProDes;
    private javax.swing.JTextField txt_LQty;
    private javax.swing.JLabel txt_SA;
    private javax.swing.JLabel txt_SA_COM;
    private javax.swing.JLabel txt_State;
    private javax.swing.JTextField txt_TrnNo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void SaveProcess() {
        try {

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Faild to Process due to:" + ex.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        } finally {

        }
    }

    public void HoldProcess() {
        try {
            SaveProcess("H");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Faild to Process due to:" + ex.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        }
    }

    public String SaveProcess(String TrnState) throws Exception {

        String TrnNo = "";
        if (but_TrnSave.isEnabled()) {

            if (doFormValidations()) {

                ArrayList<TStockline> det = new ArrayList<>();

                DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();

                for (int i = 0; i < dtm.getRowCount(); i++) {

                    String ProCode = dtm.getValueAt(i, 0).toString();

                    String ProDes = dtm.getValueAt(i, 1).toString();

                    double ProQty = Double.parseDouble(dtm.getValueAt(i, 4).toString());
                    String unitSym = dtm.getValueAt(i, 5).toString();
                    MUnits unit = (MUnits) dtm.getValueAt(i, 6);

                    String Batch = dtm.getValueAt(i, 10).toString();

                }

            }
        } else {
            throw new Exception("  save not avaialble");
        }
        return TrnNo;

    }

    @Override
    public void EditMode() {
        //   but_TrnSave.setEnabled(false);
        //but_TrnHold, but_TrnCancel,,but_TrnSave,, but_Add              

        if (but_TrnUpdate.isEnabled()) {

            but_TrnPrint.setEnabled(true);

            if (but_TrnHold.isVisible()) {
                but_TrnSave.setEnabled(true);
                but_TrnHold.setEnabled(true);
            }

            if (but_TrnCancel.isVisible()) {
                but_TrnCancel.setEnabled(true);
            }

            JComponent[] dis = {but_TrnSearch, but_TrnUpdate, txt_TrnNo};
            JComponent[] enb = {but_TrnPrint, but_Add, but_TrnRefresh, but_ItemSearch, but_TrnHold, cmb_SourceLoc, txt_LItemCode, txt_LQty, cmb_LUnit, but_Add, tblTrn};
            setDisableEnableComponents(enb, dis);

        }
    }

    @Override
    public void Refresh() {
        clearLine();
        txt_TrnNo.setText("");
        txt_TrnNo.setEnabled(true);

        txt_State.setText("");

        DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
        dtm.setRowCount(0);

        but_TrnSearch.setEnabled(true);

        but_TrnHold.setVisible(true);

        but_TrnSave.setEnabled(true);
        but_TrnUpdate.setEnabled(false);
        but_TrnRefresh.setEnabled(true);

        but_TrnPrint.setEnabled(false);
        but_TrnPrint.setVisible(false);
        but_TrnCancel.setEnabled(false);
        but_TrnCancel.setVisible(false);

        JComponent[] dis = {but_TrnUpdate};
        JComponent[] enb = {txt_TrnNo, but_TrnHold, but_TrnSearch, but_Add, but_TrnRefresh, but_ItemSearch, cmb_SourceLoc, txt_LItemCode, txt_LQty, cmb_LUnit, but_Add, tblTrn};
        setDisableEnableComponents(enb, dis);

    }

    public void setShortCutKeys(JInternalFrame f) {

        String exit = "exit";
        InputMap inputMap0 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap0.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), exit);
        ActionMap actionMap0 = f.getRootPane().getActionMap();
        actionMap0.put(exit, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                exit();
            }

        }
        );

        String Search = "Search";
        InputMap inputMap1 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap1.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), Search);
        ActionMap actionMap1 = f.getRootPane().getActionMap();
        actionMap1.put(Search, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SearchMode();
            }

        }
        );

        String Save = "Save";
        InputMap inputMap2 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap2.put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), Save);
        ActionMap actionMap2 = f.getRootPane().getActionMap();
        actionMap2.put(Save, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SaveProcess();
            }

        }
        );

        String Edit = "Edit";
        InputMap inputMap3 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap3.put(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), Edit);
        ActionMap actionMap3 = f.getRootPane().getActionMap();
        actionMap3.put(Edit, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                EditMode();
            }

        }
        );

        String Refresh = "Refresh";
        InputMap inputMap4 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap4.put(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), Refresh);
        ActionMap actionMap4 = f.getRootPane().getActionMap();
        actionMap4.put(Refresh, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                Refresh();
            }

        }
        );

        String ItemSearch = "ItemSearch";
        InputMap inputMap5 = txt_LItemCode.getInputMap(JComponent.WHEN_FOCUSED);
        inputMap5.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), ItemSearch);
        ActionMap actionMap5 = txt_LItemCode.getActionMap();
        actionMap5.put(ItemSearch, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SearchModeItem();
            }

        }
        );

        String TrnSearch = "TrnSearch";
        InputMap inputMap6 = txt_TrnNo.getInputMap(JComponent.WHEN_FOCUSED);
        inputMap6.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), TrnSearch);
        ActionMap actionMap6 = txt_TrnNo.getActionMap();
        actionMap6.put(TrnSearch, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SearchMode();
            }

        }
        );

        String TrnHold = "TrnHold";
        InputMap inputMap7 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap7.put(KeyStroke.getKeyStroke(KeyEvent.VK_F6, 0), TrnHold);
        ActionMap actionMap7 = f.getRootPane().getActionMap();
        actionMap7.put(TrnHold, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                HoldProcess();
            }

        }
        );

        String TrnLineRemove = "TrnLineRemove";
        InputMap inputMap8 = tblTrn.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap8.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), TrnLineRemove);
        ActionMap actionMap8 = tblTrn.getActionMap();
        actionMap8.put(TrnLineRemove, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                removeSelectedLine();
            }

        }
        );

    }

    private void removeSelectedLine() {
        int selectedRow = tblTrn.getSelectedRow();
        if (selectedRow > -1) {
            int res = JOptionPane.showConfirmDialog(rootPane, "Do you want to remove selected Line? (Line No:" + (selectedRow + 1) + ")", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (res == JOptionPane.YES_OPTION) {
                DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
                dtm.removeRow(selectedRow);

                txt_LItemCode.grabFocus();
            }
        }
    }

    private void exit() {

        try {
            this.setClosed(true);
            mainW.CurrentFrame = "";

        } catch (PropertyVetoException ex) {
            Logger.getLogger(Frm_TPhyStock.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void setDisableEnableComponents(JComponent[] EnComlist, JComponent[] DisComlist) {
        for (JComponent c : DisComlist) {
            c.setEnabled(false);
        }
        for (JComponent c : EnComlist) {
            c.setEnabled(true);
        }

    }

    @Override
    public void SearchMode() {
        if (but_TrnSearch.isEnabled()) {

            Vector<String> col = new Vector<>();
            col.add("Code");
            col.add("State");
            col.add("CR Date");
            col.add("MD Date");

            Vector<String> Sercol = new Vector<>();
            Sercol.add("Code");

            Sercol.add("CR Date");
            Sercol.add("MD Date");

            String[] SQL_Col = {"ID", "STATE", "CRDATE", "MDDATE"};
            String[] SQL_SerCol = {"ID", "CRDATE", "MDDATE"};

            String SQL = "select ID,IF (TRNSTATE='H','HOLD', IF(TRNSTATE='P','PROCESSED','CANCELLED')) AS STATE,CRDATE,MDDATE from T_STOCKMST ";

            String SQLWhere = "    ";
            String SQLEnd = " ORDER BY MDDATE desc LIMIT 100 ";

            Connection currentCon = null;
            try {
                currentCon = DB.getCurrentCon();
            } catch (Exception ex) {
                Logger.getLogger(Frm_MItems.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ft == null) {

                ft = new Frm_Table(txt_TrnNo, currentCon, col, SQL_Col, Sercol, SQL_SerCol, SQL, SQLWhere, SQLEnd, true, false);
                ft.setVisible(true);

            } else {
                ft = null;
                ft = new Frm_Table(txt_TrnNo, currentCon, col, SQL_Col, Sercol, SQL_SerCol, SQL, SQLWhere, SQLEnd, true, false);
                ft.setFocusable(true);
                ft.setVisible(true);
            }

        }
    }

    public void SearchModeItem() {
        Vector<String> col = new Vector<>();

        MLocation L = (MLocation) cmb_SourceLoc.getSelectedItem();

        col.add("Code");
        col.add("Description");

        String SQL = " SELECT * FROM ( select p.ID,p.NAME";

        ArrayList<String> SQL_Col = new ArrayList();
        SQL_Col.add("ID");
        SQL_Col.add("NAME");

        col.add("Cost");
        SQL_Col.add("COSTP");
        SQL += " ,s.COSTP  ";

        col.add("Sell");
        SQL_Col.add("SELLP");
        SQL += " ,s.SELLP ";

        SQL_Col.add("REF1");
        col.add("Ref1");
        SQL += ",p.REF1 ";

        String[] SQL_ar = new String[SQL_Col.size()];
        int i = 0;
        for (String cold : SQL_Col) {

            SQL_ar[i] = cold;
            i++;
        }

        String SQLWhere = "";

        SQL += " from m_products p inner join m_stocks s  ";
        SQL += " on p.ID=s.M_PRODUCTS_ID   ";
        SQLWhere += "  s.M_LOCATION_ID='" + L.getId() + "' AND p.ACTIVE=1   ";
        SQLWhere += " group by p.ID   ";
        SQLWhere += " having max(s.BATCHNO)  ";

        SQLWhere += ") A WHERE ";

        Connection currentCon = null;
        try {
            currentCon = DB.getCurrentCon();
        } catch (Exception ex) {
            Logger.getLogger(Frm_MItems.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ft == null) {

            ft = new Frm_Table(txt_LItemCode, currentCon, col, SQL_ar, SQL, SQLWhere, "");
            ft.setVisible(true);

        } else {
            // ft = null;
            ft = new Frm_Table(txt_LItemCode, currentCon, col, SQL_ar, SQL, SQLWhere, "");
            ft.setFocusable(true);
            ft.setVisible(true);
        }
    }

    /*  TABLE OPERATIONS */
    private void addToTable(boolean isAutoLoad) {
        try {

            if (doAddLineValidation()) {

                DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();

                String ProCode = txt_LItemCode.getText();

                MProducts product = C_Pro.getProduct(ProCode);

                String Des = product.getName();

                double Qty = Double.parseDouble(txt_LQty.getText());

                MUnits Unit = (MUnits) cmb_LUnit.getSelectedItem();
                String UnitSym = Unit.getSymble();
                String Batch = txt_LBatch.getText();
                String TrnRefNo = "";
                double CheckExists = 0;
                int exist_row = -1;
                try {

                    exist_row = CheckExists(ProCode, (Qty > 0 ? 0 : 1));
                    if (lbl_IsLoad.getText().length() == 0) {
                        CheckExists = Double.parseDouble(dtm.getValueAt(exist_row, 4).toString());
                        Qty = CheckExists + Qty;
                    }

                } catch (Exception e) {

                }

                MUnits u = (MUnits) cmb_LUnit.getSelectedItem();
                double unitConversion = C_Pro.getUnitConversion(txt_LItemCode.getText(), u.getId());

                Vector v = new Vector();
                v.add(ProCode);//0
                v.add(Des);//1

                v.add(Qty);//4
                v.add(UnitSym);//5
                v.add(Unit);//6

                v.add(Batch);//10

            }
        } catch (Exception ex) {
            if (ex != null && ex.getMessage() != null && ex.getMessage().length() > 0) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);
            }

        }

    }

    private int CheckExists(String Code, int rettyp) throws Exception {
        DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
        int row = -1;
        boolean state = false;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            String proCode = dtm.getValueAt(i, 0).toString();
            int isRet = Integer.parseInt(dtm.getValueAt(i, 13).toString());
            if (proCode.equals(Code) && rettyp == isRet) {
                row = i;
                state = true;
                break;
            }
        }
        if (state == false) {
            throw new Exception("Avaialble");
        }
        return row;
    }

    private void LoadLine(int index) {

        if (index > -1 && index < tblTrn.getRowCount()) {
            try {
                DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
                String ProCode = dtm.getValueAt(index, 0).toString();
                String ProDes = dtm.getValueAt(index, 1).toString();
                String ProCost = dtm.getValueAt(index, 2).toString();
                String ProSell = dtm.getValueAt(index, 3).toString();
                String ProQty = dtm.getValueAt(index, 4).toString();
                String unitSym = dtm.getValueAt(index, 5).toString();
                MUnits unit = (MUnits) dtm.getValueAt(index, 6);

                String ProDisPer = dtm.getValueAt(index, 7).toString();
                String ProDisAmt = dtm.getValueAt(index, 8).toString();
                String ProAmt = dtm.getValueAt(index, 9).toString();
                String Batch = dtm.getValueAt(index, 10).toString();

                txt_LItemCode.setText(ProCode);
                txt_LProDes.setText(ProDes);
                MProducts product = C_Pro.getProduct(ProCode);
                cmb_LUnit.setModel(new DefaultComboBoxModel(C_Units.getAllAssignUnitsVect(product.getUnitGroupId())));
                cmb_LUnit.setSelectedItem(unit);

                txt_LQty.setText(ProQty);

                txt_LBatch.setText(Batch);
                txtImgPath.setText(product.getProImg());
                lbl_IsLoad.setText("1");
                txt_LQty.grabFocus();

            } catch (Exception ex) {
                Logger.getLogger(Frm_TPhyStock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void clearLine() {
        txt_LItemCode.setText("");
        txt_LProDes.setText("");

        txt_LQty.setText("0.0");

        txt_LBatch.setText("");
        cmb_LUnit.setModel(new DefaultComboBoxModel(new Vector()));

        focusNumber = itemcodeFocusNo;
        txt_LItemCode.grabFocus();
        lbl_Line_ProImg.setIcon(null);
        lbl_IsLoad.setText("");
        lbl_RefTrnNo.setText("");
        txtImgPath.setText("");
        txt_SA.setText("");
        txt_SA_COM.setText("");
    }

    private boolean doAddLineValidation() throws Exception {
        boolean state = true;
        MProducts pro = C_Pro.getProduct(txt_LItemCode.getText(), 1);
        if (pro == null) {
            state = false;
            throw new Exception("Need Item valid Code");
        } else if (txt_LQty.getText().equals("")) {
            state = false;
            throw new Exception("Need to fill Quantity");
        } else if (cmb_LUnit.getSelectedIndex() == -1) {
            state = false;
            throw new Exception("Select Unit");
        } else if (Double.parseDouble(txt_LQty.getText()) == 0) {
            state = false;
            throw new Exception("Quantity Cannot be Zero");
        }

        return state;
    }

    private void loadProduct() {
        try {
            if (!txt_LItemCode.getText().equals("")) {

                String ProNo = C_Pro.getProNoFull(txt_LItemCode.getText());
                txt_LItemCode.setText(ProNo);

                ArrayList<MProducts> allSubItems = C_Pro.getAllSubItems(txt_LItemCode.getText());
                if (allSubItems.size() > 1) {

                    String createSubItemsPopUp = Frm_MProSubItems.createSubItemsPopUp(mainW, allSubItems);
                    txt_LItemCode.setText(createSubItemsPopUp);
                }

                String ProCode = txt_LItemCode.getText();

                MProducts product = C_Pro.getProductTrn(ProCode, 1);
                if (product != null) {

                    boolean statee = false;

                    statee = true;

                    if (statee) {

                        String Des = product.getName();

                        double CPrice = product.getCprice();

                        double SPrice = product.getSprice();
                        String Batch = "";

                        MLocation Loc = (MLocation) cmb_SourceLoc.getSelectedItem();
                        ArrayList<MStocks> allBatches = C_Pro.getAllBatches(product.getId(), Loc.getId().toString(), 1);
                        if (allBatches.size() > 0) {
                            MStocks stk = Frm_MBatchPopUp.createBatchPopUp(mainW, allBatches);
                            if (stk != null) {
                                CPrice = stk.getCostPrice();
                                SPrice = stk.getSellPrice();
                                Batch = stk.getBatchNo();
                            }
                        }

                        txt_LBatch.setText(Batch);
                        txt_LProDes.setText("<html><p>" + Des + "</p></html>");

                        cmb_LUnit.setModel(new DefaultComboBoxModel(C_Units.getAllAssignUnitsVect(product.getUnitGroupId())));

                        txt_LQty.setText("1");

                        txt_LQty.grabFocus();

                        txtImgPath.setText(product.getProImg());
                        //setProductIcon(product.getProImg());
                        //setProductIcon(product.getId());

                    } else {
                        clearLine();
                        throw new Exception("Product [" + ProCode + " - " + product.getName() + "] not belongs to the supplier you select ");
                    }
                } else {
                    clearLine();
                    throw new Exception("Can`t find active product for  Code " + ProCode + "");

                }

            } else {
                txt_LItemCode.grabFocus();
                clearLine();
                throw new Exception("Need a Item Code");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        }
    }

    private void ProductImageLoad() {

    }

    private void loadLocations() {
        try {

            cmb_SourceLoc.setModel(new DefaultComboBoxModel(C_Loc.getAllLocationsV()));

        } catch (Exception ex) {

        }
    }

    private void SetFocusTraversal() {
        focusList = getFocustOrder();
        //tab key order
        this.setFocusTraversalPolicy(new MyFocusTraversalPolicy(focusNumber, focusList));
        try {
            KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {
                @Override
                public boolean dispatchKeyEvent(KeyEvent ke) {
                    if (ke.getID() == KeyEvent.KEY_PRESSED) {
                        if (ke.getKeyCode() == KeyEvent.VK_TAB) {
                            Component comp = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();

                            if (comp.isEnabled() == false) {
                                if (ke.isShiftDown()) {
                                    KeyboardFocusManager.getCurrentKeyboardFocusManager().focusPreviousComponent();
                                } else {
                                    KeyboardFocusManager.getCurrentKeyboardFocusManager().focusNextComponent();
                                }
                            }
                        }
                    }
                    return false;
                }
            });
        } catch (Exception e) {
            System.err.println("Exception in product Search Window Exception:" + e);
        }

    }

    private JComponent[] getFocustOrder() {
        focusNumber = 0;
        ArrayList<JComponent> ar = new ArrayList<>();
        ar.add(txt_TrnNo);

        if (cmb_SourceLoc.isVisible()) {
            ar.add(cmb_SourceLoc);
        }

        if (txt_LItemCode.isVisible()) {
            itemcodeFocusNo = ar.size() - 1;
            ar.add(txt_LItemCode);
        }

        if (txt_LQty.isVisible()) {
            ar.add(txt_LQty);
        }
        if (cmb_LUnit.isVisible()) {
            ar.add(cmb_LUnit);
        }

        if (txt_LItemCode.isVisible()) {
            ar.add(txt_LItemCode);
        }

        JComponent[] arOrd = new JComponent[ar.size()];
        for (int i = 0; i < ar.size(); i++) {
            arOrd[i] = ar.get(i);
        }

        return arOrd;

    }

    private boolean doFormValidations() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void LoadDetails(ArrayList<TPhystkdet> ar_pro) {

    }

}
