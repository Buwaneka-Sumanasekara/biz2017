/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SUBUI;

import CONTROLLERS.C_Units;
import DB_ACCESS.DB;
import GLOBALDATA.GlobalData;
import MAIN.Frm_Main;
import MODELS.MUnitGroup;
import MODELS.MUnitGroupAssign;
import MODELS.MUnits;
import Test.Frm_Test;
import UI.Frm_Table;
import VALIDATIONS.MyValidator;
import WINMNG.MyWindowBasicControllers;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HOME
 */
public class Frm_MUnitGroup extends javax.swing.JInternalFrame implements MyWindowBasicControllers {

    Frm_Table ft = null;

    Frm_Main mainW = null;
    MyValidator fv = null;

    C_Units c_units = null;

    public Frm_MUnitGroup(Frm_Main mainw, String ScreenName) {
        initComponents();
        c_units = new C_Units();
        this.setTitle(ScreenName);
        this.lblScreenName.setText(ScreenName);
        this.mainW = mainw;
        this.fv = new MyValidator();
        createLayOut();
        Refresh();
        setShortCutKeys(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Layout_Parent = new javax.swing.JTabbedPane();
        layout_UnitGroup = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txt_UnitGroupId = new javax.swing.JTextField();
        txt_UnitGroupName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Chk_Active = new javax.swing.JCheckBox();
        layout_UnitGroupAssign = new javax.swing.JPanel();
        cmb_UAUnit = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        txt_UAVolume = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUAList = new javax.swing.JTable();
        but_AddToUnitGroup = new javax.swing.JButton();
        Chk_Activeuga = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        but_UGUpdate = new javax.swing.JButton();
        but_UGSave = new javax.swing.JButton();
        but_UGSearch = new javax.swing.JButton();
        but_UGRefresh = new javax.swing.JButton();
        lblScreenName = new javax.swing.JLabel();
        jpanelq = new javax.swing.JPanel();

        setClosable(true);
        setTitle("caption");
        setName(""); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Layout_Parent.setBackground(new java.awt.Color(255, 255, 255));

        layout_UnitGroup.setBackground(new java.awt.Color(255, 255, 255));
        layout_UnitGroup.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 204));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setForeground(new java.awt.Color(153, 51, 0));
        jLabel5.setText("System will provide Auto Number for Code. So you need not to enter Code while creating  new Records");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 800, 40));

        layout_UnitGroup.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 810, 40));

        txt_UnitGroupId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_UnitGroupIdActionPerformed(evt);
            }
        });
        txt_UnitGroupId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_UnitGroupIdKeyTyped(evt);
            }
        });
        layout_UnitGroup.add(txt_UnitGroupId, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 150, 30));
        layout_UnitGroup.add(txt_UnitGroupName, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 260, 30));

        jLabel2.setText("Code");
        layout_UnitGroup.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 110, 30));

        jLabel4.setText("Description *");
        layout_UnitGroup.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 110, 30));

        Chk_Active.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Chk_ActiveMouseClicked(evt);
            }
        });
        layout_UnitGroup.add(Chk_Active, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 260, 180, -1));

        Layout_Parent.addTab("Unit Group Create", layout_UnitGroup);

        layout_UnitGroupAssign.setBackground(new java.awt.Color(255, 255, 255));
        layout_UnitGroupAssign.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        layout_UnitGroupAssign.add(cmb_UAUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 160, 30));

        jLabel1.setText("Volume");
        layout_UnitGroupAssign.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 160, -1));
        layout_UnitGroupAssign.add(txt_UAVolume, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, 160, 30));

        jLabel3.setText("Unit ");
        layout_UnitGroupAssign.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 160, -1));

        tblUAList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Unit", "Volume", "Base Unit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUAList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblUAListKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblUAList);
        if (tblUAList.getColumnModel().getColumnCount() > 0) {
            tblUAList.getColumnModel().getColumn(0).setResizable(false);
            tblUAList.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblUAList.getColumnModel().getColumn(1).setResizable(false);
            tblUAList.getColumnModel().getColumn(1).setPreferredWidth(50);
            tblUAList.getColumnModel().getColumn(2).setResizable(false);
            tblUAList.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        layout_UnitGroupAssign.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 790, 290));

        but_AddToUnitGroup.setText("Add");
        but_AddToUnitGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_AddToUnitGroupActionPerformed(evt);
            }
        });
        layout_UnitGroupAssign.add(but_AddToUnitGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 90, 30));

        Chk_Activeuga.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Chk_ActiveugaMouseClicked(evt);
            }
        });
        layout_UnitGroupAssign.add(Chk_Activeuga, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 180, -1));

        Layout_Parent.addTab("Assign Units to Group", layout_UnitGroupAssign);

        jPanel1.add(Layout_Parent, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 860, 570));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        but_UGUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/edit.png"))); // NOI18N
        but_UGUpdate.setToolTipText("Save");
        but_UGUpdate.setContentAreaFilled(false);
        but_UGUpdate.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/edit_disable.png"))); // NOI18N
        but_UGUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_UGUpdateActionPerformed(evt);
            }
        });
        jPanel2.add(but_UGUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 40, 40));

        but_UGSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Save.png"))); // NOI18N
        but_UGSave.setToolTipText("Save");
        but_UGSave.setContentAreaFilled(false);
        but_UGSave.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Save_disable.png"))); // NOI18N
        but_UGSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_UGSaveActionPerformed(evt);
            }
        });
        jPanel2.add(but_UGSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 40, 40));

        but_UGSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Search.png"))); // NOI18N
        but_UGSearch.setToolTipText("Search(F2)");
        but_UGSearch.setContentAreaFilled(false);
        but_UGSearch.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Search_disable.png"))); // NOI18N
        but_UGSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_UGSearchActionPerformed(evt);
            }
        });
        jPanel2.add(but_UGSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 40, 40));

        but_UGRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/refresh.png"))); // NOI18N
        but_UGRefresh.setToolTipText("Refresh");
        but_UGRefresh.setContentAreaFilled(false);
        but_UGRefresh.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/refresh_disable.png"))); // NOI18N
        but_UGRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_UGRefreshActionPerformed(evt);
            }
        });
        jPanel2.add(but_UGRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 0, 40, 40));

        lblScreenName.setBackground(new java.awt.Color(153, 255, 51));
        lblScreenName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblScreenName.setText("caption");
        jPanel2.add(lblScreenName, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 0, 180, 40));
        jPanel2.add(jpanelq, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, 270, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 868, 630));

        setBounds(0, 0, 867, 659);
    }// </editor-fold>//GEN-END:initComponents

    private void but_UGSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_UGSearchActionPerformed
        SearchMode();
    }//GEN-LAST:event_but_UGSearchActionPerformed

    private void but_UGRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_UGRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_but_UGRefreshActionPerformed

    private void but_UGSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_UGSaveActionPerformed
        SaveProcess();
    }//GEN-LAST:event_but_UGSaveActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

    }//GEN-LAST:event_formInternalFrameOpened

    private void but_UGUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_UGUpdateActionPerformed
        EditMode();
    }//GEN-LAST:event_but_UGUpdateActionPerformed

    private void txt_UnitGroupIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_UnitGroupIdActionPerformed
        loadUnitGroup();
    }//GEN-LAST:event_txt_UnitGroupIdActionPerformed

    private void txt_UnitGroupIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_UnitGroupIdKeyTyped

    }//GEN-LAST:event_txt_UnitGroupIdKeyTyped

    private void Chk_ActiveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Chk_ActiveMouseClicked

    }//GEN-LAST:event_Chk_ActiveMouseClicked

    private void Chk_ActiveugaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Chk_ActiveugaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Chk_ActiveugaMouseClicked

    private void but_AddToUnitGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_AddToUnitGroupActionPerformed
        addUnit();
    }//GEN-LAST:event_but_AddToUnitGroupActionPerformed

    private void tblUAListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblUAListKeyPressed

        int selectedRow = tblUAList.getSelectedRow();
        if (selectedRow >= 0) {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Do you want to remove highlighted unit?", GlobalData.MESSAGEBOX, JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    MUnits ug = (MUnits) tblUAList.getValueAt(selectedRow, 0);
                    DefaultTableModel dtm=(DefaultTableModel) tblUAList.getModel();
                    try {
                        dtm.removeRow(selectedRow);
                        if (txt_UnitGroupId.getText().length() > 0) {
                            c_units.removeGroupAssign(txt_UnitGroupId.getText(), ug.getId());
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, e.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

                    }
                }
            }
        }


    }//GEN-LAST:event_tblUAListKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Chk_Active;
    private javax.swing.JCheckBox Chk_Activeuga;
    private javax.swing.JTabbedPane Layout_Parent;
    private javax.swing.JButton but_AddToUnitGroup;
    private javax.swing.JButton but_UGRefresh;
    private javax.swing.JButton but_UGSave;
    private javax.swing.JButton but_UGSearch;
    private javax.swing.JButton but_UGUpdate;
    private javax.swing.JComboBox cmb_UAUnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpanelq;
    private javax.swing.JPanel layout_UnitGroup;
    private javax.swing.JPanel layout_UnitGroupAssign;
    private javax.swing.JLabel lblScreenName;
    private javax.swing.JTable tblUAList;
    private javax.swing.JTextField txt_UAVolume;
    private javax.swing.JTextField txt_UnitGroupId;
    private javax.swing.JTextField txt_UnitGroupName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void SaveProcess() {
        if (checkValidate()) {
            DefaultTableModel dtm = (DefaultTableModel) tblUAList.getModel();
            if (txt_UnitGroupId.getText().equals("")) {
                //new
                try {
                    MUnitGroup ug = new MUnitGroup();
                    ug.setUnitGroupId(c_units.GenerateNewUnitGroupNo());
                    ug.setUnitGroupName(txt_UnitGroupName.getText());
                    ug.setUnitGroupActive(Chk_Active.isSelected() ? 1 : 0);

                    ArrayList<MUnitGroupAssign> uga = new ArrayList<>();
                    for (int i = 0; i < dtm.getRowCount(); i++) {
                        MUnits u = (MUnits) dtm.getValueAt(i, 0);
                        double volume = Double.parseDouble(dtm.getValueAt(i, 1).toString());

                        boolean IsBase = Boolean.valueOf(dtm.getValueAt(i, 2).toString());

                        uga.add(new MUnitGroupAssign(ug.getUnitGroupId(), u.getId(), volume, IsBase ? 1 : 0, 1));
                    }
                    c_units.SaveUnitGroup(ug, uga);
                    Refresh();
                    JOptionPane.showMessageDialog(rootPane, "Save Sucessfull", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.INFORMATION_MESSAGE);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "ERROR :" + e.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

                }
            } else {
                String unitId = txt_UnitGroupId.getText();
                try {
                    MUnitGroup ug = c_units.findUnitGroupExists(unitId);
                    if (ug != null) {

                        ug.setUnitGroupName(txt_UnitGroupName.getText());
                        ug.setUnitGroupActive(Chk_Active.isSelected() ? 1 : 0);

                        ArrayList<MUnitGroupAssign> uga = new ArrayList<>();
                        for (int i = 0; i < dtm.getRowCount(); i++) {
                            MUnits u = (MUnits) dtm.getValueAt(i, 0);
                            double volume = Double.parseDouble(dtm.getValueAt(i, 1).toString());
                            boolean IsBase = Boolean.valueOf(dtm.getValueAt(i, 2).toString());
                            uga.add(new MUnitGroupAssign(ug.getUnitGroupId(), u.getId(), volume, IsBase ? 1 : 0, 1));
                        }
                        c_units.UpdateUnitGroup(ug, uga);
                        Refresh();
                        JOptionPane.showMessageDialog(rootPane, "Update Sucessfull", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Couldn`t find specific Unit group for :" + unitId, GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "ERROR :" + e.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

                }
            }
        }
    }

    @Override
    public void EditMode() {
        JComponent[] DisComlist = {but_UGSearch, txt_UnitGroupId, but_UGUpdate};
        JComponent[] EnComlist = {but_UGSave, but_UGRefresh, but_AddToUnitGroup, txt_UnitGroupName, cmb_UAUnit, Chk_Active, tblUAList, txt_UAVolume, Chk_Activeuga};
        setDisableEnableComponents(EnComlist, DisComlist);
    }

    @Override
    public void Refresh() {
        txt_UnitGroupId.setText("");
        txt_UnitGroupName.setText("");
        DefaultTableModel dtm = (DefaultTableModel) tblUAList.getModel();

        dtm.setRowCount(0);
        txt_UAVolume.setText("");
        Chk_Active.setSelected(true);
        Chk_Activeuga.setSelected(true);
        txt_UnitGroupId.grabFocus();
        JComponent[] DisComlist = {but_UGUpdate};
        JComponent[] EnComlist = {but_UGSave, but_UGRefresh, but_AddToUnitGroup, but_UGSearch, txt_UnitGroupId, txt_UnitGroupName, cmb_UAUnit, Chk_Active, tblUAList, txt_UAVolume, Chk_Activeuga};
        setDisableEnableComponents(EnComlist, DisComlist);
    }

    public void setShortCutKeys(JInternalFrame f) {

        String exit = "exit";
        InputMap inputMap0 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap0.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), exit);
        ActionMap actionMap0 = f.getRootPane().getActionMap();
        actionMap0.put(exit, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                exit();
            }

        }
        );

        String Search = "Search";
        InputMap inputMap1 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap1.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), Search);
        ActionMap actionMap1 = f.getRootPane().getActionMap();
        actionMap1.put(Search, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SearchMode();
            }

        }
        );

        String Save = "Save";
        InputMap inputMap2 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap2.put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), Save);
        ActionMap actionMap2 = f.getRootPane().getActionMap();
        actionMap2.put(Save, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SaveProcess();
            }

        }
        );

        String Edit = "Edit";
        InputMap inputMap3 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap3.put(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), Edit);
        ActionMap actionMap3 = f.getRootPane().getActionMap();
        actionMap3.put(Edit, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                EditMode();
            }

        }
        );

        String Refresh = "Refresh";
        InputMap inputMap4 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap4.put(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), Refresh);
        ActionMap actionMap4 = f.getRootPane().getActionMap();
        actionMap4.put(Refresh, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                Refresh();
            }

        }
        );

    }

    private void exit() {

        try {
            this.setClosed(true);
            mainW.CurrentFrame = "";

        } catch (PropertyVetoException ex) {
            Logger.getLogger(Frm_MUnitGroup.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void setDisableEnableComponents(JComponent[] EnComlist, JComponent[] DisComlist) {
        for (JComponent c : DisComlist) {
            c.setEnabled(false);
        }
        for (JComponent c : EnComlist) {
            c.setEnabled(true);
        }

    }

    @Override
    public void SearchMode() {
        Vector<String> col = new Vector<>();
        col.add("Code");
        col.add("Des");

        String[] SQL_Col = {"ID", "NAME"};
        String SQL = "select ID,NAME from M_UNITGROUPS ";

        Connection currentCon = null;
        try {
            currentCon = DB.getCurrentCon();
        } catch (Exception ex) {
            Logger.getLogger(Frm_Test.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ft == null) {

            ft = new Frm_Table(txt_UnitGroupId, currentCon, col, SQL_Col, SQL, "");
            ft.setVisible(true);

        } else {
            ft = null;
            ft = new Frm_Table(txt_UnitGroupId, currentCon, col, SQL_Col, SQL, "");
            ft.setFocusable(true);
            ft.setVisible(true);
        }

    }

    private boolean checkValidate() {
        boolean state = true;

        if (txt_UnitGroupName.getText().equals("")) {
            state = false;
            JOptionPane.showMessageDialog(rootPane, "Please provide Unit group Name", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);
        } else if (tblUAList.getRowCount() == 0) {
            state = false;
            Layout_Parent.setSelectedIndex(1);
            JOptionPane.showMessageDialog(rootPane, "Please assign units to this group", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        }
        return state;
    }

    private void createLayOut() {
        Vector<MUnits> v = c_units.getAllUnits();
        cmb_UAUnit.setModel(new DefaultComboBoxModel(v));
    }

    private void addUnit() {
        if (validateUnitAssign()) {
            MUnits u = (MUnits) cmb_UAUnit.getSelectedItem();

            DefaultTableModel dtm = (DefaultTableModel) tblUAList.getModel();

            String BaseUnit = "";
            for (int i = 0; i < dtm.getRowCount(); i++) {
                MUnits ug = (MUnits) dtm.getValueAt(i, 0);
                // double vol = Double.parseDouble(dtm.getValueAt(i, 1).toString());
                Boolean IsBase = Boolean.getBoolean(dtm.getValueAt(i, 2).toString());
                if (IsBase) {
                    BaseUnit = ug.getId();
                }
                if (u.getId().equals(ug.getId())) {
                    dtm.removeRow(i);

                }
            }

            Vector v = new Vector();
            v.add(u);
            v.add(txt_UAVolume.getText());
            if (BaseUnit.equals("")) {
                v.add(Chk_Activeuga.isSelected());
            } else {
                v.add(false);
            }
            dtm.addRow(v);

        }
    }

    private boolean validateUnitAssign() {
        boolean state = true;

        if (cmb_UAUnit.getItemCount() == 0) {
            state = false;
            JOptionPane.showMessageDialog(rootPane, "No units found!", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        } else if (txt_UAVolume.getText().equals("")) {
            state = false;
            JOptionPane.showMessageDialog(rootPane, "Please add volume", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        }

        return state;

    }

    private void loadUnitGroup() {
        String Unitgroup = txt_UnitGroupId.getText();
        if (!Unitgroup.equals("")) {
            try {
                MUnitGroup ug = c_units.findUnitGroupExists(Unitgroup);
                if (ug != null) {
                    txt_UnitGroupName.setText(ug.getUnitGroupName());
                    Chk_Active.setSelected(ug.getUnitGroupActive() == 1 ? true : false);

                    ArrayList<Vector> ar = c_units.getAllAssignUnits(ug.getUnitGroupId());
                    DefaultTableModel dtm = (DefaultTableModel) tblUAList.getModel();
                    dtm.setRowCount(0);
                    for (Vector v : ar) {
                        dtm.addRow(v);
                    }
                    JComponent[] EnComlist = {but_UGUpdate, but_UGRefresh};
                    JComponent[] DisComlist = {but_UGSave, but_UGSearch, but_AddToUnitGroup, cmb_UAUnit, txt_UnitGroupId, txt_UnitGroupName, Chk_Active, tblUAList, txt_UAVolume, Chk_Activeuga};
                    setDisableEnableComponents(EnComlist, DisComlist);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "This Unit group no is not exists", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

                }
            } catch (Exception e) {
            }

        } else {
            txt_UnitGroupName.grabFocus();
        }
    }

}
