/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SUBUI;


import CONTROLLERS.C_GroupCommon;
import MAIN.Frm_Main;
import MODELS.MGroupCommon;
import UI.Frm_Table;
import VALIDATIONS.MyValidator;
import WINMNG.MyWindowBasicControllers;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author HOME
 */
public class Frm_TStockCountSel extends javax.swing.JInternalFrame implements MyWindowBasicControllers {

    Frm_Table ft = null;
  
    Frm_Main mainW=null;
    MyValidator fv=null;
    C_GroupCommon cGrp = null;
        TreeMap<String, Vector<MGroupCommon>> Grps = null;
    Map<Integer, String> groupDisplayNames = null;
    public Frm_TStockCountSel(Frm_Main mainw,String ScreenName) {
        initComponents();
       this.setTitle(ScreenName);
       this.lblScreenName.setText(ScreenName);
        this.mainW=mainw;
        this.fv=new MyValidator();
        this.cGrp=new C_GroupCommon();
        Refresh();
       setShortCutKeys(this);
    }

    

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        but_LocSave = new javax.swing.JButton();
        butLocRefresh = new javax.swing.JButton();
        lblScreenName = new javax.swing.JLabel();
        jpanelq = new javax.swing.JPanel();
        layout_Group = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        chk_GrpSelectAll = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tree_Grps = new javax.swing.JTree();
        lbl_GrpName = new javax.swing.JLabel();
        lbl_GrpCode = new javax.swing.JLabel();
        but_Grp_Back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Grp = new javax.swing.JTable();
        but_Grp_Next = new javax.swing.JButton();
        chkAllGroups = new javax.swing.JCheckBox();
        layout_LocationsPanel = new javax.swing.JPanel();
        cmb_SourceLoc = new javax.swing.JComboBox();

        setClosable(true);
        setTitle("caption");
        setName(""); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        but_LocSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Save.png"))); // NOI18N
        but_LocSave.setToolTipText("Save");
        but_LocSave.setContentAreaFilled(false);
        but_LocSave.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Save_disable.png"))); // NOI18N
        but_LocSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_LocSaveActionPerformed(evt);
            }
        });

        butLocRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/refresh.png"))); // NOI18N
        butLocRefresh.setToolTipText("Refresh");
        butLocRefresh.setContentAreaFilled(false);
        butLocRefresh.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/refresh_disable.png"))); // NOI18N
        butLocRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLocRefreshActionPerformed(evt);
            }
        });

        lblScreenName.setBackground(new java.awt.Color(153, 255, 51));
        lblScreenName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblScreenName.setText("caption");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(but_LocSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(butLocRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 530, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(lblScreenName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpanelq, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(but_LocSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(butLocRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lblScreenName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jpanelq, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        layout_Group.setBackground(new java.awt.Color(255, 255, 255));
        layout_Group.setBorder(javax.swing.BorderFactory.createTitledBorder("Categories"));
        layout_Group.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chk_GrpSelectAll.setText("All");
        chk_GrpSelectAll.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chk_GrpSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_GrpSelectAllActionPerformed(evt);
            }
        });
        jPanel3.add(chk_GrpSelectAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, 60, 30));

        jScrollPane2.setViewportView(tree_Grps);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 200, 280));

        lbl_GrpName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_GrpName.setForeground(new java.awt.Color(153, 153, 153));
        lbl_GrpName.setText("GROUP NAME");
        jPanel3.add(lbl_GrpName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 320, 30));

        lbl_GrpCode.setText("1");
        jPanel3.add(lbl_GrpCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 60, 30));

        but_Grp_Back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/if_arrow-back_216437.png"))); // NOI18N
        but_Grp_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_Grp_BackActionPerformed(evt);
            }
        });
        jPanel3.add(but_Grp_Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 70, 30));

        tbl_Grp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "State"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_Grp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_GrpMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_Grp);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 530, 240));

        but_Grp_Next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/if_icons_share_1564530.png"))); // NOI18N
        but_Grp_Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_Grp_NextActionPerformed(evt);
            }
        });
        jPanel3.add(but_Grp_Next, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 70, 30));

        layout_Group.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 810, 300));

        chkAllGroups.setBackground(new java.awt.Color(255, 255, 255));
        chkAllGroups.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        chkAllGroups.setSelected(true);
        chkAllGroups.setText("All Groups");
        chkAllGroups.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAllGroupsItemStateChanged(evt);
            }
        });
        chkAllGroups.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkAllGroupsMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chkAllGroupsMouseReleased(evt);
            }
        });
        chkAllGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAllGroupsActionPerformed(evt);
            }
        });
        layout_Group.add(chkAllGroups, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 740, 40));

        layout_LocationsPanel.setBackground(new java.awt.Color(255, 255, 255));
        layout_LocationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Location "));
        layout_LocationsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        layout_LocationsPanel.add(cmb_SourceLoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 180, 30));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(600, 600, 600)
                        .addComponent(layout_LocationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(layout_Group, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(layout_LocationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(layout_Group, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 966, 653);
    }// </editor-fold>//GEN-END:initComponents

    private void butLocRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLocRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_butLocRefreshActionPerformed

    private void but_LocSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_LocSaveActionPerformed
       
    }//GEN-LAST:event_but_LocSaveActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
      
    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
   
    }//GEN-LAST:event_formInternalFrameOpened

    private void chk_GrpSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_GrpSelectAllActionPerformed
        Grp_SelectAll();
    }//GEN-LAST:event_chk_GrpSelectAllActionPerformed

    private void but_Grp_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_Grp_BackActionPerformed
        Grp_Back();
    }//GEN-LAST:event_but_Grp_BackActionPerformed

    private void tbl_GrpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_GrpMouseClicked

    }//GEN-LAST:event_tbl_GrpMouseClicked

    private void but_Grp_NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_Grp_NextActionPerformed
        Grp_Next();
    }//GEN-LAST:event_but_Grp_NextActionPerformed

    private void chkAllGroupsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAllGroupsItemStateChanged

    }//GEN-LAST:event_chkAllGroupsItemStateChanged

    private void chkAllGroupsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkAllGroupsMouseClicked

    }//GEN-LAST:event_chkAllGroupsMouseClicked

    private void chkAllGroupsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkAllGroupsMouseReleased
        setGroupPanelEnable();
    }//GEN-LAST:event_chkAllGroupsMouseReleased

    private void chkAllGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAllGroupsActionPerformed

    }//GEN-LAST:event_chkAllGroupsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butLocRefresh;
    private javax.swing.JButton but_Grp_Back;
    private javax.swing.JButton but_Grp_Next;
    private javax.swing.JButton but_LocSave;
    private javax.swing.JCheckBox chkAllGroups;
    private javax.swing.JCheckBox chk_GrpSelectAll;
    private javax.swing.JComboBox cmb_SourceLoc;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jpanelq;
    private javax.swing.JPanel layout_Group;
    private javax.swing.JPanel layout_LocationsPanel;
    private javax.swing.JLabel lblScreenName;
    private javax.swing.JLabel lbl_GrpCode;
    private javax.swing.JLabel lbl_GrpName;
    private javax.swing.JTable tbl_Grp;
    private javax.swing.JTree tree_Grps;
    // End of variables declaration//GEN-END:variables

    @Override
    public void SaveProcess() {

      
    }

    @Override
    public void EditMode() {
       
    }

    @Override
    public void Refresh() {
         Grp_setGroups(1);
    }

    public void setShortCutKeys(JInternalFrame f) {

       String exit = "exit";
        InputMap inputMap0 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap0.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), exit);
        ActionMap actionMap0 = f.getRootPane().getActionMap();
        actionMap0.put(exit, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                exit();
            }

        }
        );

        String Search = "Search";
        InputMap inputMap1 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap1.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), Search);
        ActionMap actionMap1 = f.getRootPane().getActionMap();
        actionMap1.put(Search, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SearchMode();
            }

        }
        );
        
          String Save = "Save";
        InputMap inputMap2 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap2.put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), Save);
        ActionMap actionMap2 = f.getRootPane().getActionMap();
        actionMap2.put(Save, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SaveProcess();
            }

        }
        );
        
           String Edit = "Edit";
        InputMap inputMap3 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap3.put(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), Edit);
        ActionMap actionMap3 = f.getRootPane().getActionMap();
        actionMap3.put(Edit, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                EditMode();
            }

        }
        );
        
          String Refresh = "Refresh";
        InputMap inputMap4 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap4.put(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), Refresh);
        ActionMap actionMap4 = f.getRootPane().getActionMap();
        actionMap4.put(Refresh, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                Refresh();
            }

        }
        );


    }

    private void exit() {
      
        try {
            this.setClosed(true);
            mainW.CurrentFrame="";
            
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Frm_TStockCountSel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    @Override
    public void setDisableEnableComponents(JComponent[] EnComlist, JComponent[] DisComlist) {
        for (JComponent c : DisComlist) {
            c.setEnabled(false);
        }
        for (JComponent c : EnComlist) {
            c.setEnabled(true);
        }
        
    }

    @Override
    public void SearchMode() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    
    
    
    
    
    
    private void Grp_setGroups(int grpno) {
        Grp_setTree();
        if (grpno >= 1 && grpno <= 5) {
            lbl_GrpCode.setText("" + grpno);
            lbl_GrpName.setText(groupDisplayNames.get(grpno).toUpperCase());
            Grp_NxtBackButSet();
            DefaultTableModel dtm = (DefaultTableModel) tbl_Grp.getModel();
            dtm.setRowCount(0);

            Vector<MGroupCommon> allGroupValues = null;

            if (grpno == 1) {
                allGroupValues = cGrp.getAllGroupValues(grpno);
            } else {
                allGroupValues = cGrp.GetGroupValuesMapped((grpno - 1), Grps.get("" + (grpno - 1)), grpno);
            }

            Vector<MGroupCommon> Selected = Grps.get("" + grpno);

            if (allGroupValues != null) {
                for (MGroupCommon mGroupCommon : allGroupValues) {
                    Vector row = new Vector();
                    row.add(mGroupCommon);
                    if (Selected != null) {
                        row.add(Grp_CheckAvaiable(mGroupCommon, Selected));
                    } else {
                        row.add(false);
                    }

                    dtm.addRow(row);
                }
            }

            if (Selected == null || Selected.size() == 0) {

                Grp_SelectAll(false);
            }
        } else if (grpno > 5) {
            but_Grp_Next.setEnabled(false);
        } else if (grpno < 1) {
            but_Grp_Back.setEnabled(false);
        }
    }

    private boolean Grp_CheckAvaiable(MGroupCommon g, Vector<MGroupCommon> grps) {
        boolean state = false;
        for (MGroupCommon mGroupCommon : grps) {
            if (mGroupCommon.equals(g)) {
                state = true;
                break;
            }
        }
        return state;
    }

    private void Grp_SelectAll() {
        boolean selected = chk_GrpSelectAll.isSelected();
        DefaultTableModel dtm = (DefaultTableModel) tbl_Grp.getModel();
        for (int i = 0; i < dtm.getRowCount(); i++) {
            dtm.setValueAt(selected, i, 1);
        }
    }

    private void Grp_SelectAll(boolean selected) {

        DefaultTableModel dtm = (DefaultTableModel) tbl_Grp.getModel();
        for (int i = 0; i < dtm.getRowCount(); i++) {
            dtm.setValueAt(selected, i, 1);
        }
    }

    private void Grp_Next() {
        Grp_setTree();
        if (but_Grp_Next.isEnabled()) {
            int GrpNo = Integer.parseInt(lbl_GrpCode.getText());
            if (GrpNo <= 5 && GrpNo > 0) {

                DefaultTableModel dtm = (DefaultTableModel) tbl_Grp.getModel();

                Vector<MGroupCommon> SelGrp = new Vector<>();
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    if ((boolean) dtm.getValueAt(i, 1)) {
                        SelGrp.add((MGroupCommon) dtm.getValueAt(i, 0));
                    }
                }

                if (SelGrp.size() > 0) {
                    Grps.put("" + GrpNo, SelGrp);

                    Grp_setGroups(GrpNo + 1);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Need to Select at least One group from the table", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }

    private void Grp_Back() {

        if (but_Grp_Back.isEnabled()) {

            int GrpNo = Integer.parseInt(lbl_GrpCode.getText());

            Vector<MGroupCommon> SelGrp = new Vector<>();

            Grps.put("" + GrpNo, SelGrp);

            Grp_setGroups(GrpNo - 1);
        }
    }

    private void Grp_NxtBackButSet() {
        int GrpNo = Integer.parseInt(lbl_GrpCode.getText());
        if (GrpNo > 1 && GrpNo <= 5) {
            but_Grp_Back.setEnabled(true);
            if (GrpNo > 5) {
                but_Grp_Next.setEnabled(false);
            }
        } else if (GrpNo <= 5 && GrpNo > 0) {
            but_Grp_Next.setEnabled(true);

        } else {
            but_Grp_Next.setEnabled(false);
        }
    }

    private void Grp_setTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("");

        for (int i = 1; i <= 5; i++) {
            DefaultMutableTreeNode Node_g = new DefaultMutableTreeNode(groupDisplayNames.get(i));
            Vector<MGroupCommon> get = Grps.get("" + i);
            if (get != null) {
                for (MGroupCommon g : get) {

                    DefaultMutableTreeNode Node_g_data = new DefaultMutableTreeNode(g);
                    Node_g.add(Node_g_data);
                }
            }
            root.add(Node_g);
        }

        tree_Grps.setModel(new DefaultTreeModel(root));

        expandAllNodes(tree_Grps, 0, tree_Grps.getRowCount());
    }

    private void expandAllNodes(JTree tree, int startingIndex, int rowCount) {
        for (int i = startingIndex; i < rowCount; ++i) {
            tree.expandRow(i);
        }

        if (tree.getRowCount() != rowCount) {
            expandAllNodes(tree, rowCount, tree.getRowCount());
        }
    }
    
    
     private void setGroupPanelEnable() {

        boolean itemstate = !chkAllGroups.isSelected();

        if (itemstate) {
            for (Map.Entry<String, Vector<MGroupCommon>> entry : Grps.entrySet()) {
                String string = entry.getKey();
                Vector<MGroupCommon> vector = new Vector<>();
                Grps.put(string, vector);

            }

        }
        tbl_Grp.setEnabled(itemstate);
        but_Grp_Back.setEnabled(itemstate);
        but_Grp_Next.setEnabled(itemstate);
        chk_GrpSelectAll.setEnabled(itemstate);
        tree_Grps.setEnabled(itemstate);
        if (!itemstate) {
            Grp_SelectAll(false);
        }

    }
    
    
}
