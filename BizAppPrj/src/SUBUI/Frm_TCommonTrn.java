/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SUBUI;

import COMMONFUN.CommonFun;
import COMMONFUN.MyTableModel;
import COMMONFUN.ReportC;
import COMMONFUN.TblCellColour;
import CONTROLLERS.C_Customers;
import CONTROLLERS.C_Locations;
import CONTROLLERS.C_Products;
import CONTROLLERS.C_Suppliers;
import CONTROLLERS.C_TransactionCom;
import CONTROLLERS.C_TransactionSetup;
import CONTROLLERS.C_Units;
import DB_ACCESS.DB;
import FOCUS_TRAVERSAL.MyFocusTraversalPolicy;
import MAIN.Frm_Main;
import MODELS.MCustomer;
import MODELS.MLocation;
import MODELS.MPermissions;
import MODELS.MProducts;
import MODELS.MStocks;
import MODELS.MSupplier;
import MODELS.MUnits;
import MODELS.TStockline;
import MODELS.TStockmst;
import MODELS.UTransactions;
import UI.Frm_Table;
import VALIDATIONS.MyValidator;
import WINMNG.MyWindowBasicControllers;
import java.awt.Color;
import java.awt.Component;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperReport;

/**
 *
 * @author HOME
 */
public class Frm_TCommonTrn extends javax.swing.JInternalFrame implements MyWindowBasicControllers {

    int focusNumber = 0;
    JComponent[] focusList = null;
    Frm_Table ft = null;

    Frm_Main mainW = null;
    MyValidator fv = null;
    UTransactions TrnSetup = null;
    C_TransactionSetup CTrnSetup = null;
    C_Locations C_Loc = null;
    C_Suppliers C_Sup = null;
    C_Customers C_Cus = null;
    C_Products C_Pro = null;
    C_Units C_Units = null;
    C_TransactionCom C_TrnCom = null;
    ArrayList<JComponent> FocusingOrder = null;
    ReportC C_Report = null;

    JasperReport jr = null;

    CommonFun cf = null;

    public Frm_TCommonTrn(Frm_Main mainw, String ScreenName, UTransactions TrnSetup) {
        initComponents();
        this.setTitle(ScreenName);
        this.lblScreenName.setText(ScreenName);
        this.mainW = mainw;
        this.fv = new MyValidator();

        this.TrnSetup = TrnSetup;
        this.CTrnSetup = new C_TransactionSetup();
        this.C_Pro = new C_Products();
        this.C_Loc = new C_Locations();
        this.C_Sup = new C_Suppliers();
        this.C_Cus = new C_Customers();
        this.C_Units = new C_Units();
        this.C_TrnCom = new C_TransactionCom();
        this.FocusingOrder = new ArrayList<JComponent>();
        this.C_Report = new ReportC();
        this.cf = new CommonFun();
        CompileReport();
        Refresh();
        setShortCutKeys(this);
        // createTrnWindow();

        tblTrn.setDefaultRenderer(Object.class, new TblCellColour());

        tblTrn.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table = (JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 2) {
                    LoadLine(tblTrn.getSelectedRow());
                }
            }
        });

        SetFocusTraversal();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        layout_TopActionPanel = new javax.swing.JPanel();
        but_TrnUpdate = new javax.swing.JButton();
        but_TrnSave = new javax.swing.JButton();
        but_TrnHold = new javax.swing.JButton();
        but_TrnRefresh = new javax.swing.JButton();
        lblScreenName = new javax.swing.JLabel();
        jpanelq = new javax.swing.JPanel();
        but_TrnSearch = new javax.swing.JButton();
        but_TrnCancel = new javax.swing.JButton();
        txt_State = new javax.swing.JLabel();
        but_TrnPrint = new javax.swing.JButton();
        layout_TopMsgPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lbl_TrnNo = new javax.swing.JLabel();
        txt_TrnNo = new javax.swing.JTextField();
        layout_LocationsPanel = new javax.swing.JPanel();
        lbl_DestLoc = new javax.swing.JLabel();
        lbl_SourceLoc = new javax.swing.JLabel();
        cmb_SourceLoc = new javax.swing.JComboBox();
        cmb_DestLoc = new javax.swing.JComboBox();
        lbl_DateSelector = new javax.swing.JLabel();
        txt_DateSelector = new com.toedter.calendar.JDateChooser();
        cmb_Sup = new javax.swing.JComboBox();
        lbl_Sup = new javax.swing.JLabel();
        lbl_Cus = new javax.swing.JLabel();
        cmb_Cus = new javax.swing.JComboBox();
        lbl_RefTrn = new javax.swing.JLabel();
        txt_RefTrn = new javax.swing.JTextField();
        lbl_RefNo = new javax.swing.JLabel();
        txt_RefNo = new javax.swing.JTextField();
        lbl_RefNo2 = new javax.swing.JLabel();
        txt_RefNo2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        lbl_LDisAmt = new javax.swing.JLabel();
        txt_LDisAmt = new javax.swing.JTextField();
        txt_LItemCode = new javax.swing.JTextField();
        txt_LCost = new javax.swing.JTextField();
        txt_LDisPer = new javax.swing.JTextField();
        txt_LQty = new javax.swing.JTextField();
        txt_LSell = new javax.swing.JTextField();
        lbl_LItemCode = new javax.swing.JLabel();
        lbl_LCost = new javax.swing.JLabel();
        lbl_LSell = new javax.swing.JLabel();
        lbl_LQty = new javax.swing.JLabel();
        lbl_LDisPer = new javax.swing.JLabel();
        but_Add = new javax.swing.JButton();
        txt_LAmt = new javax.swing.JTextField();
        lbl_LAmt = new javax.swing.JLabel();
        but_ItemSearch = new javax.swing.JButton();
        txt_LProDes = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmb_LUnit = new javax.swing.JComboBox();
        txt_LBatch = new javax.swing.JLabel();
        lbl_IsReturn = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTrn = new javax.swing.JTable();
        lbl_FSubTot = new javax.swing.JLabel();
        lbl_FNetDis = new javax.swing.JLabel();
        lbl_FAmount = new javax.swing.JLabel();
        txt_FAmount = new javax.swing.JLabel();
        txt_FSubTot = new javax.swing.JLabel();
        txt_FNetDis = new javax.swing.JTextField();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("caption");
        setName(""); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(226, 226, 226));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        layout_TopActionPanel.setBackground(new java.awt.Color(204, 204, 204));
        layout_TopActionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        but_TrnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/edit.png"))); // NOI18N
        but_TrnUpdate.setToolTipText("Edit");
        but_TrnUpdate.setContentAreaFilled(false);
        but_TrnUpdate.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/edit_disable.png"))); // NOI18N
        but_TrnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnUpdateActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 40, 40));

        but_TrnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Save.png"))); // NOI18N
        but_TrnSave.setToolTipText("Save");
        but_TrnSave.setContentAreaFilled(false);
        but_TrnSave.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Save_disable.png"))); // NOI18N
        but_TrnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnSaveActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 40, 40));

        but_TrnHold.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/hold.png"))); // NOI18N
        but_TrnHold.setToolTipText("Hold(F6)");
        but_TrnHold.setContentAreaFilled(false);
        but_TrnHold.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/hold_disable.png"))); // NOI18N
        but_TrnHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnHoldActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnHold, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 40, 40));

        but_TrnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/refresh.png"))); // NOI18N
        but_TrnRefresh.setToolTipText("Refresh");
        but_TrnRefresh.setContentAreaFilled(false);
        but_TrnRefresh.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/refresh_disable.png"))); // NOI18N
        but_TrnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnRefreshActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 0, 40, 40));

        lblScreenName.setBackground(new java.awt.Color(153, 255, 51));
        lblScreenName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblScreenName.setText("caption");
        layout_TopActionPanel.add(lblScreenName, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 0, 180, 40));
        layout_TopActionPanel.add(jpanelq, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, 270, 40));

        but_TrnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Search.png"))); // NOI18N
        but_TrnSearch.setToolTipText("Search(F2)");
        but_TrnSearch.setContentAreaFilled(false);
        but_TrnSearch.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Search_disable.png"))); // NOI18N
        but_TrnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnSearchActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 40, 40));

        but_TrnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/if_352-Document_Remove_2124269.png"))); // NOI18N
        but_TrnCancel.setToolTipText("Cancel(F7)");
        but_TrnCancel.setContentAreaFilled(false);
        but_TrnCancel.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/hold_disable.png"))); // NOI18N
        but_TrnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnCancelActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, 40, 40));

        txt_State.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_State.setForeground(new java.awt.Color(255, 0, 0));
        txt_State.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_State.setText("jLabel2");
        layout_TopActionPanel.add(txt_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 200, 40));

        but_TrnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/if_print__outline__printer__document__office__computer__networkprinter_2318007 (1).png"))); // NOI18N
        but_TrnPrint.setToolTipText("Cancel(F7)");
        but_TrnPrint.setContentAreaFilled(false);
        but_TrnPrint.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/hold_disable.png"))); // NOI18N
        but_TrnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_TrnPrintActionPerformed(evt);
            }
        });
        layout_TopActionPanel.add(but_TrnPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, 40, 40));

        jPanel1.add(layout_TopActionPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 40));

        layout_TopMsgPanel.setBackground(new java.awt.Color(255, 255, 204));
        layout_TopMsgPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setForeground(new java.awt.Color(153, 51, 0));
        jLabel5.setText("System will provide Auto Number for Code. So you need not to enter Code while creating  new Records");
        layout_TopMsgPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 830, 20));

        jPanel1.add(layout_TopMsgPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 840, 20));

        lbl_TrnNo.setText("No");
        jPanel1.add(lbl_TrnNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 70, 40, 30));

        txt_TrnNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_TrnNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_TrnNoFocusLost(evt);
            }
        });
        txt_TrnNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_TrnNoActionPerformed(evt);
            }
        });
        jPanel1.add(txt_TrnNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 170, 30));

        layout_LocationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Location "));
        layout_LocationsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_DestLoc.setText("To");
        layout_LocationsPanel.add(lbl_DestLoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 30, 30));

        lbl_SourceLoc.setText("From");
        layout_LocationsPanel.add(lbl_SourceLoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 30, 30));

        layout_LocationsPanel.add(cmb_SourceLoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 160, 30));

        layout_LocationsPanel.add(cmb_DestLoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 160, 30));

        jPanel1.add(layout_LocationsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 60, 220, 90));

        lbl_DateSelector.setText("Date");
        jPanel1.add(lbl_DateSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 40, 30));

        txt_DateSelector.setDateFormatString("yyyy-MM-dd");
        txt_DateSelector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_DateSelectorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_DateSelectorFocusLost(evt);
            }
        });
        jPanel1.add(txt_DateSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 170, 30));

        jPanel1.add(cmb_Sup, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 70, 280, 30));

        lbl_Sup.setText("Supplier");
        jPanel1.add(lbl_Sup, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 80, 20));

        lbl_Cus.setText("Customer");
        jPanel1.add(lbl_Cus, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 80, 30));

        jPanel1.add(cmb_Cus, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 110, 280, 30));

        lbl_RefTrn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_RefTrn.setText("Ref Trn");
        jPanel1.add(lbl_RefTrn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 110, 30));

        txt_RefTrn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_RefTrnFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_RefTrnFocusLost(evt);
            }
        });
        jPanel1.add(txt_RefTrn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 170, 30));

        lbl_RefNo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_RefNo.setText("Ref No");
        jPanel1.add(lbl_RefNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, 90, 30));

        txt_RefNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_RefNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_RefNoFocusLost(evt);
            }
        });
        jPanel1.add(txt_RefNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 170, 30));

        lbl_RefNo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_RefNo2.setText("Ref No2");
        jPanel1.add(lbl_RefNo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 150, 90, 30));

        txt_RefNo2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_RefNo2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_RefNo2FocusLost(evt);
            }
        });
        jPanel1.add(txt_RefNo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 150, 170, 30));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_LDisAmt.setText("Dis Amount");
        jPanel2.add(lbl_LDisAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 20, 80, -1));

        txt_LDisAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LDisAmtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LDisAmtFocusLost(evt);
            }
        });
        txt_LDisAmt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_LDisAmtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_LDisAmtKeyTyped(evt);
            }
        });
        jPanel2.add(txt_LDisAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 40, 80, 30));

        txt_LItemCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LItemCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LItemCodeFocusLost(evt);
            }
        });
        txt_LItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_LItemCodeActionPerformed(evt);
            }
        });
        jPanel2.add(txt_LItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 120, 30));

        txt_LCost.setEditable(false);
        txt_LCost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LCostFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LCostFocusLost(evt);
            }
        });
        txt_LCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_LCostKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_LCostKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_LCostKeyTyped(evt);
            }
        });
        jPanel2.add(txt_LCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 100, 30));

        txt_LDisPer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LDisPerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LDisPerFocusLost(evt);
            }
        });
        txt_LDisPer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_LDisPerKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_LDisPerKeyTyped(evt);
            }
        });
        jPanel2.add(txt_LDisPer, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, 60, 30));

        txt_LQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LQtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LQtyFocusLost(evt);
            }
        });
        txt_LQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_LQtyActionPerformed(evt);
            }
        });
        txt_LQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_LQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_LQtyKeyTyped(evt);
            }
        });
        jPanel2.add(txt_LQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 40, 70, 30));

        txt_LSell.setEditable(false);
        txt_LSell.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LSellFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LSellFocusLost(evt);
            }
        });
        txt_LSell.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_LSellKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_LSellKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_LSellKeyTyped(evt);
            }
        });
        jPanel2.add(txt_LSell, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, 100, 30));

        lbl_LItemCode.setText("Item Code");
        jPanel2.add(lbl_LItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 110, -1));

        lbl_LCost.setText("Cost");
        jPanel2.add(lbl_LCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 100, -1));

        lbl_LSell.setText("Sell");
        jPanel2.add(lbl_LSell, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 100, -1));

        lbl_LQty.setText("Qty");
        jPanel2.add(lbl_LQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 70, -1));

        lbl_LDisPer.setText("Dis %");
        jPanel2.add(lbl_LDisPer, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, 60, -1));

        but_Add.setText("Add");
        but_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_AddActionPerformed(evt);
            }
        });
        jPanel2.add(but_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(789, 30, -1, 40));

        txt_LAmt.setEditable(false);
        txt_LAmt.setText("0.0");
        txt_LAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_LAmtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_LAmtFocusLost(evt);
            }
        });
        txt_LAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_LAmtActionPerformed(evt);
            }
        });
        jPanel2.add(txt_LAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 40, 90, 30));

        lbl_LAmt.setText("Amount");
        jPanel2.add(lbl_LAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 20, 90, -1));

        but_ItemSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/1480175721_Find01.png"))); // NOI18N
        but_ItemSearch.setToolTipText("Search(F2)");
        but_ItemSearch.setContentAreaFilled(false);
        but_ItemSearch.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/SYSIMG/Controlls/Search_disable.png"))); // NOI18N
        but_ItemSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_ItemSearchActionPerformed(evt);
            }
        });
        jPanel2.add(but_ItemSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 30, 30));

        txt_LProDes.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txt_LProDes.setForeground(new java.awt.Color(0, 51, 204));
        txt_LProDes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));
        jPanel2.add(txt_LProDes, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 620, 20));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Item Name");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 80, 20));

        cmb_LUnit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_LUnitItemStateChanged(evt);
            }
        });
        cmb_LUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_LUnitActionPerformed(evt);
            }
        });
        jPanel2.add(cmb_LUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 130, 30));
        jPanel2.add(txt_LBatch, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, 90, 20));
        jPanel2.add(lbl_IsReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 50, 20));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 840, 70));

        tblTrn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Description", "Cost", "Sell Price", "Qty", "UnitSym", "Unit", "Dis%", "Dis Amt", "Amount", "Batch", "ColorId", "IsGV", "IsReturn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTrn.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTrn.getTableHeader().setReorderingAllowed(false);
        tblTrn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTrnMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTrn);
        if (tblTrn.getColumnModel().getColumnCount() > 0) {
            tblTrn.getColumnModel().getColumn(0).setResizable(false);
            tblTrn.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblTrn.getColumnModel().getColumn(1).setResizable(false);
            tblTrn.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblTrn.getColumnModel().getColumn(2).setResizable(false);
            tblTrn.getColumnModel().getColumn(2).setPreferredWidth(60);
            tblTrn.getColumnModel().getColumn(3).setResizable(false);
            tblTrn.getColumnModel().getColumn(3).setPreferredWidth(60);
            tblTrn.getColumnModel().getColumn(4).setResizable(false);
            tblTrn.getColumnModel().getColumn(4).setPreferredWidth(10);
            tblTrn.getColumnModel().getColumn(5).setResizable(false);
            tblTrn.getColumnModel().getColumn(5).setPreferredWidth(10);
            tblTrn.getColumnModel().getColumn(6).setResizable(false);
            tblTrn.getColumnModel().getColumn(6).setPreferredWidth(0);
            tblTrn.getColumnModel().getColumn(7).setResizable(false);
            tblTrn.getColumnModel().getColumn(7).setPreferredWidth(20);
            tblTrn.getColumnModel().getColumn(8).setResizable(false);
            tblTrn.getColumnModel().getColumn(8).setPreferredWidth(30);
            tblTrn.getColumnModel().getColumn(9).setResizable(false);
            tblTrn.getColumnModel().getColumn(9).setPreferredWidth(60);
            tblTrn.getColumnModel().getColumn(10).setResizable(false);
            tblTrn.getColumnModel().getColumn(10).setPreferredWidth(0);
            tblTrn.getColumnModel().getColumn(11).setResizable(false);
            tblTrn.getColumnModel().getColumn(11).setPreferredWidth(0);
            tblTrn.getColumnModel().getColumn(12).setResizable(false);
            tblTrn.getColumnModel().getColumn(13).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 840, 280));

        lbl_FSubTot.setText("Sub Total");
        jPanel1.add(lbl_FSubTot, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, -1, -1));

        lbl_FNetDis.setText("Dis %");
        jPanel1.add(lbl_FNetDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 580, -1, -1));

        lbl_FAmount.setText("Amount");
        jPanel1.add(lbl_FAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 564, -1, 20));

        txt_FAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_FAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txt_FAmount.setText("0.0");
        txt_FAmount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(txt_FAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 550, 190, 50));

        txt_FSubTot.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txt_FSubTot.setText("0.0");
        txt_FSubTot.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(txt_FSubTot, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 540, 140, 30));

        txt_FNetDis.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_FNetDis.setText("0.0");
        txt_FNetDis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_FNetDisKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_FNetDisKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_FNetDisKeyTyped(evt);
            }
        });
        jPanel1.add(txt_FNetDis, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 570, 140, 30));

        jFormattedTextField1.setText("jFormattedTextField1");
        jPanel1.add(jFormattedTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 390, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 610));

        setBounds(0, 0, 857, 633);
    }// </editor-fold>//GEN-END:initComponents

    private void but_TrnHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnHoldActionPerformed
        HoldProcess();
    }//GEN-LAST:event_but_TrnHoldActionPerformed

    private void but_TrnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_but_TrnRefreshActionPerformed

    private void but_TrnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnSaveActionPerformed
        SaveProcess();
    }//GEN-LAST:event_but_TrnSaveActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

    }//GEN-LAST:event_formInternalFrameOpened

    private void but_TrnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnUpdateActionPerformed
        EditMode();
    }//GEN-LAST:event_but_TrnUpdateActionPerformed

    private void but_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_AddActionPerformed
        addToTable();
    }//GEN-LAST:event_but_AddActionPerformed

    private void txt_LItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_LItemCodeActionPerformed
        loadProduct();
    }//GEN-LAST:event_txt_LItemCodeActionPerformed

    private void but_ItemSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_ItemSearchActionPerformed
        SearchModeItem();
    }//GEN-LAST:event_but_ItemSearchActionPerformed

    private void txt_LQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LQtyKeyTyped
        fv.validateforFloatingPoints(txt_LQty, evt, 3);
    }//GEN-LAST:event_txt_LQtyKeyTyped

    private void txt_LDisPerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LDisPerKeyTyped

    }//GEN-LAST:event_txt_LDisPerKeyTyped

    private void txt_LDisAmtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LDisAmtKeyTyped

    }//GEN-LAST:event_txt_LDisAmtKeyTyped

    private void txt_LQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LQtyKeyReleased
//        fv.NumbersOnly_MinusAllow(txt_LQty, evt);
        CalculateLine();
    }//GEN-LAST:event_txt_LQtyKeyReleased

    private void txt_LDisPerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LDisPerKeyReleased
        CalculateLine();        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LDisPerKeyReleased

    private void txt_LDisAmtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LDisAmtKeyReleased
        fv.NumbersOnly(txt_LDisAmt, evt);
        CalculateLine();        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LDisAmtKeyReleased

    private void txt_LCostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LCostKeyReleased
        CalculateLine();        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LCostKeyReleased

    private void txt_LSellKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LSellKeyReleased
        fv.NumbersOnly(txt_LSell, evt);
        CalculateLine();
    }//GEN-LAST:event_txt_LSellKeyReleased

    private void tblTrnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTrnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblTrnMouseClicked

    private void txt_FNetDisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_FNetDisKeyReleased

        CalculateTotal();
    }//GEN-LAST:event_txt_FNetDisKeyReleased

    private void txt_LCostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LCostKeyPressed

    }//GEN-LAST:event_txt_LCostKeyPressed

    private void txt_FNetDisKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_FNetDisKeyPressed

    }//GEN-LAST:event_txt_FNetDisKeyPressed

    private void cmb_LUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_LUnitActionPerformed

        CalculateLine();
    }//GEN-LAST:event_cmb_LUnitActionPerformed

    private void cmb_LUnitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_LUnitItemStateChanged

    }//GEN-LAST:event_cmb_LUnitItemStateChanged

    private void txt_LQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_LQtyActionPerformed
        addToTable();
    }//GEN-LAST:event_txt_LQtyActionPerformed

    private void txt_LSellKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LSellKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LSellKeyPressed

    private void txt_LCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LCostKeyTyped
        fv.validateforFloatingPoints(txt_LCost, evt, 2);        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LCostKeyTyped

    private void txt_LSellKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_LSellKeyTyped
        fv.validateforFloatingPoints(txt_LSell, evt, 2);            // TODO add your handling code here:
    }//GEN-LAST:event_txt_LSellKeyTyped

    private void txt_FNetDisKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_FNetDisKeyTyped
        fv.validateforFloatingPoints(txt_FNetDis, evt, 2);        // TODO add your handling code here:
    }//GEN-LAST:event_txt_FNetDisKeyTyped

    private void txt_LAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_LAmtActionPerformed
        addToTable();
    }//GEN-LAST:event_txt_LAmtActionPerformed

    private void txt_LItemCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LItemCodeFocusGained
        txt_LItemCode.setBackground(Color.YELLOW);        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LItemCodeFocusGained

    private void txt_LItemCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LItemCodeFocusLost
        txt_LItemCode.setBackground(Color.WHITE);          // TODO add your handling code here:
    }//GEN-LAST:event_txt_LItemCodeFocusLost

    private void txt_LCostFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LCostFocusGained
        txt_LCost.setBackground(Color.YELLOW);          // TODO add your handling code here:
    }//GEN-LAST:event_txt_LCostFocusGained

    private void txt_LSellFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LSellFocusGained
        txt_LSell.setBackground(Color.YELLOW);          // TODO add your handling code here:
    }//GEN-LAST:event_txt_LSellFocusGained

    private void txt_LQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LQtyFocusGained
        if (!txt_LQty.getText().equals("") && Double.parseDouble(txt_LQty.getText()) == 0.0) {
            txt_LQty.setText("");
        }
        txt_LQty.setBackground(Color.YELLOW);          // TODO add your handling code here:
    }//GEN-LAST:event_txt_LQtyFocusGained

    private void txt_LDisPerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LDisPerFocusGained
        if (!txt_LDisPer.getText().equals("") && Double.parseDouble(txt_LDisPer.getText()) == 0.0) {
            txt_LDisPer.setText("");
        }
        txt_LDisPer.setBackground(Color.YELLOW);          // TODO add your handling code here:
    }//GEN-LAST:event_txt_LDisPerFocusGained

    private void txt_LDisAmtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LDisAmtFocusGained
        if (!txt_LDisAmt.getText().equals("") && Double.parseDouble(txt_LDisAmt.getText()) == 0.0) {
            txt_LDisAmt.setText("");
        }
        txt_LDisAmt.setBackground(Color.YELLOW);          // TODO add your handling code here:
    }//GEN-LAST:event_txt_LDisAmtFocusGained

    private void txt_LCostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LCostFocusLost
        txt_LCost.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_LCostFocusLost

    private void txt_LSellFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LSellFocusLost
        txt_LSell.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_LSellFocusLost

    private void txt_LQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LQtyFocusLost

        if (txt_LQty.getText().equals("")) {
            txt_LQty.setText("0.0");
        }
        txt_LQty.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_LQtyFocusLost

    private void txt_LDisPerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LDisPerFocusLost
        if (txt_LDisPer.getText().equals("")) {
            txt_LDisPer.setText("0.0");
        }
        txt_LDisPer.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_LDisPerFocusLost

    private void txt_LDisAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LDisAmtFocusLost

        if (txt_LDisAmt.getText().equals("")) {
            txt_LDisAmt.setText("0.0");
        }
        txt_LDisAmt.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_LDisAmtFocusLost

    private void txt_LAmtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LAmtFocusGained
        txt_LAmt.setBackground(Color.YELLOW);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_LAmtFocusGained

    private void txt_LAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_LAmtFocusLost
        txt_LAmt.setBackground(Color.WHITE);        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LAmtFocusLost

    private void txt_DateSelectorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_DateSelectorFocusGained
        txt_DateSelector.setBackground(Color.YELLOW);
    }//GEN-LAST:event_txt_DateSelectorFocusGained

    private void txt_DateSelectorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_DateSelectorFocusLost
        txt_DateSelector.setBackground(Color.white);
    }//GEN-LAST:event_txt_DateSelectorFocusLost

    private void txt_RefTrnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_RefTrnFocusGained
        txt_RefTrn.setBackground(Color.YELLOW);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_RefTrnFocusGained

    private void txt_RefTrnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_RefTrnFocusLost
        txt_RefTrn.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_RefTrnFocusLost

    private void txt_RefNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_RefNoFocusGained
        txt_RefNo.setBackground(Color.YELLOW);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_RefNoFocusGained

    private void txt_RefNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_RefNoFocusLost
        txt_RefNo.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_RefNoFocusLost

    private void txt_RefNo2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_RefNo2FocusGained
        txt_RefNo2.setBackground(Color.YELLOW);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_RefNo2FocusGained

    private void txt_RefNo2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_RefNo2FocusLost
        txt_RefNo2.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_RefNo2FocusLost

    private void txt_TrnNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_TrnNoFocusGained
        txt_TrnNo.setBackground(Color.YELLOW);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_TrnNoFocusGained

    private void txt_TrnNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_TrnNoFocusLost
        txt_TrnNo.setBackground(Color.WHITE);         // TODO add your handling code here:
    }//GEN-LAST:event_txt_TrnNoFocusLost

    private void but_TrnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnSearchActionPerformed
        SearchMode();        // TODO add your handling code here:
    }//GEN-LAST:event_but_TrnSearchActionPerformed

    private void txt_TrnNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_TrnNoActionPerformed
        loadTransaction();

    }//GEN-LAST:event_txt_TrnNoActionPerformed

    private void but_TrnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnCancelActionPerformed
        cancelTrn();
    }//GEN-LAST:event_but_TrnCancelActionPerformed

    private void but_TrnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_TrnPrintActionPerformed
        printTrn();
    }//GEN-LAST:event_but_TrnPrintActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_Add;
    private javax.swing.JButton but_ItemSearch;
    private javax.swing.JButton but_TrnCancel;
    private javax.swing.JButton but_TrnHold;
    private javax.swing.JButton but_TrnPrint;
    private javax.swing.JButton but_TrnRefresh;
    private javax.swing.JButton but_TrnSave;
    private javax.swing.JButton but_TrnSearch;
    private javax.swing.JButton but_TrnUpdate;
    private javax.swing.JComboBox cmb_Cus;
    private javax.swing.JComboBox cmb_DestLoc;
    private javax.swing.JComboBox cmb_LUnit;
    private javax.swing.JComboBox cmb_SourceLoc;
    private javax.swing.JComboBox cmb_Sup;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpanelq;
    private javax.swing.JPanel layout_LocationsPanel;
    private javax.swing.JPanel layout_TopActionPanel;
    private javax.swing.JPanel layout_TopMsgPanel;
    private javax.swing.JLabel lblScreenName;
    private javax.swing.JLabel lbl_Cus;
    private javax.swing.JLabel lbl_DateSelector;
    private javax.swing.JLabel lbl_DestLoc;
    private javax.swing.JLabel lbl_FAmount;
    private javax.swing.JLabel lbl_FNetDis;
    private javax.swing.JLabel lbl_FSubTot;
    private javax.swing.JLabel lbl_IsReturn;
    private javax.swing.JLabel lbl_LAmt;
    private javax.swing.JLabel lbl_LCost;
    private javax.swing.JLabel lbl_LDisAmt;
    private javax.swing.JLabel lbl_LDisPer;
    private javax.swing.JLabel lbl_LItemCode;
    private javax.swing.JLabel lbl_LQty;
    private javax.swing.JLabel lbl_LSell;
    private javax.swing.JLabel lbl_RefNo;
    private javax.swing.JLabel lbl_RefNo2;
    private javax.swing.JLabel lbl_RefTrn;
    private javax.swing.JLabel lbl_SourceLoc;
    private javax.swing.JLabel lbl_Sup;
    private javax.swing.JLabel lbl_TrnNo;
    private javax.swing.JTable tblTrn;
    private com.toedter.calendar.JDateChooser txt_DateSelector;
    private javax.swing.JLabel txt_FAmount;
    private javax.swing.JTextField txt_FNetDis;
    private javax.swing.JLabel txt_FSubTot;
    private javax.swing.JTextField txt_LAmt;
    private javax.swing.JLabel txt_LBatch;
    private javax.swing.JTextField txt_LCost;
    private javax.swing.JTextField txt_LDisAmt;
    private javax.swing.JTextField txt_LDisPer;
    private javax.swing.JTextField txt_LItemCode;
    private javax.swing.JLabel txt_LProDes;
    private javax.swing.JTextField txt_LQty;
    private javax.swing.JTextField txt_LSell;
    private javax.swing.JTextField txt_RefNo;
    private javax.swing.JTextField txt_RefNo2;
    private javax.swing.JTextField txt_RefTrn;
    private javax.swing.JLabel txt_State;
    private javax.swing.JTextField txt_TrnNo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void SaveProcess() {
        try {
            // layout_LoadingPanel.setVisible(true);
            String trnno = SaveProcess("P");
            if (!trnno.equals("")) {
                if (jr != null) {
                    boolean printFromDB_Trn = C_Report.printFromDB_Trn(jr, trnno, TrnSetup, false, "", true);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Printout is not avaiable", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

                }

                //   layout_LoadingPanel.setVisible(false);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Faild to Process due to:" + ex.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        } finally {
            //  layout_LoadingPanel.setVisible(false);
        }
    }

    public void HoldProcess() {
        try {
            SaveProcess("H");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Faild to Process due to:" + ex.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        }
    }

    public String SaveProcess(String TrnState) throws Exception {

        String TrnNo = "";
        if (but_TrnSave.isEnabled()) {

            if (doFormValidations()) {
                TStockmst hed = new TStockmst();
                hed.setId(txt_TrnNo.getText());
                hed.setUTransactions(TrnSetup);
                hed.setFullutilize((byte) 1);
                hed.setCrdate(new Date());
                hed.setMUserByMUserCr(GLOBALDATA.GlobalData.CurUser);
                hed.setMUserByMUserMd(GLOBALDATA.GlobalData.CurUser);
                hed.setMddate(new Date());
                hed.setRefno(txt_RefNo.getText());
                hed.setRefno2(txt_RefNo2.getText());
                hed.setRefnote("");
                hed.setIsactive((byte) 1);
                hed.setTrnstate(TrnState);
                hed.setGramount(cf.parseValueWithComma(txt_FSubTot.getText()).doubleValue());
                hed.setNetdis(Double.parseDouble(txt_FNetDis.getText()));
                hed.setNetamount(cf.parseValueWithComma(txt_FAmount.getText()).doubleValue());

                if (TrnSetup.getCustomer() == 1) {
                    MCustomer cus = cmb_Cus.getSelectedIndex() == -1 ? null : (MCustomer) cmb_Cus.getSelectedItem();
                    hed.setMCustomer(cus);
                } else {
                    hed.setMCustomer(null);
                }
                if (TrnSetup.getSupplier() == 1) {
                    MSupplier sup = cmb_Sup.getSelectedIndex() == -1 ? null : (MSupplier) cmb_Sup.getSelectedItem();
                    hed.setMSupplier(sup);
                } else {
                    hed.setMSupplier(null);
                }
                MLocation LocSource = cmb_SourceLoc.getSelectedIndex() == -1 ? null : (MLocation) cmb_SourceLoc.getSelectedItem();
                hed.setMLocationByMLocationSource(LocSource);

                if (TrnSetup.getDestloc() == 1) {
                    MLocation LocDest = cmb_DestLoc.getSelectedIndex() == -1 ? null : (MLocation) cmb_DestLoc.getSelectedItem();
                    hed.setMLocationByMLocationDest(LocDest);
                } else {
                    hed.setMLocationByMLocationDest(null);
                }
                hed.setEftDate(txt_DateSelector.getDate());
                hed.setRefTrnNo(txt_RefTrn.getText());

                ArrayList<TStockline> det = new ArrayList<>();

                DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();

                for (int i = 0; i < dtm.getRowCount(); i++) {

                    String ProCode = dtm.getValueAt(i, 0).toString();

                    String ProDes = dtm.getValueAt(i, 1).toString();
                    double ProCost = Double.parseDouble(dtm.getValueAt(i, 2).toString());
                    double ProSell = Double.parseDouble(dtm.getValueAt(i, 3).toString());
                    double ProQty = Double.parseDouble(dtm.getValueAt(i, 4).toString());
                    String unitSym = dtm.getValueAt(i, 5).toString();
                    MUnits unit = (MUnits) dtm.getValueAt(i, 6);

                    double ProDisPer = Double.parseDouble(dtm.getValueAt(i, 7).toString());
                    double ProDisAmt = Double.parseDouble(dtm.getValueAt(i, 8).toString());
                    double ProAmt = Double.parseDouble(dtm.getValueAt(i, 9).toString());
                    String Batch = dtm.getValueAt(i, 10).toString();

                    TStockline stLine = new TStockline();
                    stLine.setTStockmst(hed);
                    stLine.setLineNo(i + 1);
                    stLine.setProId(ProCode);
                    stLine.setSprice(ProSell);
                    stLine.setCprice(ProCost);
                    stLine.setQty(ProQty);
                    stLine.setLdisper(ProDisPer);
                    stLine.setLdis(ProDisAmt);
                    stLine.setAmount(ProAmt);
                    stLine.setUnitId(unit.getId());
                    stLine.setUnitGroupId(C_Pro.getProduct(ProCode).getUnitGroupId());
                    stLine.setProname(ProDes);
                    stLine.setBatch(Batch);
                    stLine.setUTransactions(TrnSetup);
                    det.add(stLine);
                }

                if (TrnSetup.getPayments() == 1 && TrnState.equals("P")) {
                    TrnNo = Frm_TCommonTrnPayments.getPaymentScreen(mainW, this, true, TrnSetup, hed, det);
                    //FrmComPay.setVisible(true);
                } else {
                    TrnNo = C_TrnCom.saveTransaction(hed, det, null);
                    Refresh();
                    if (TrnState.equals("P")) {
                        JOptionPane.showMessageDialog(rootPane, "" + TrnSetup.getTrndesc() + " Processed Sucessfully", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        JOptionPane.showMessageDialog(rootPane, "" + TrnSetup.getTrndesc() + " Hold Sucessfully", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.INFORMATION_MESSAGE);

                    }
                }

            }
        } else {
            throw new Exception(" " + TrnSetup.getTrndesc() + " save not avaialble");
        }
        return TrnNo;

    }

    @Override
    public void EditMode() {
        //   but_TrnSave.setEnabled(false);
        //but_TrnHold, but_TrnCancel,,but_TrnSave,, but_Add              

        if (but_TrnUpdate.isEnabled()) {

            but_TrnPrint.setEnabled(true);

            if (but_TrnHold.isVisible()) {
                but_TrnSave.setEnabled(true);
                but_TrnHold.setEnabled(true);
            }

            if (but_TrnCancel.isVisible()) {
                but_TrnCancel.setEnabled(true);
            }

            JComponent[] dis = {but_TrnSearch, but_TrnUpdate, txt_TrnNo};
            JComponent[] enb = {but_TrnPrint, but_Add, but_TrnRefresh, but_ItemSearch, but_TrnHold, txt_DateSelector, cmb_Sup, cmb_Cus, cmb_SourceLoc, cmb_DestLoc, txt_RefTrn, txt_RefNo, txt_RefNo2, txt_LItemCode, txt_LCost, txt_LSell, txt_LQty, cmb_LUnit, txt_LDisPer, txt_LDisAmt, txt_LAmt, but_Add, tblTrn};
            setDisableEnableComponents(enb, dis);
        }
    }

    @Override
    public void Refresh() {
        clearLine();
        txt_TrnNo.setText("");
        txt_TrnNo.setEnabled(true);
        txt_DateSelector.setDate(null);
        txt_RefNo.setText("");
        txt_RefNo2.setText("");
        txt_RefTrn.setText("");
        txt_State.setText("");
//        layout_LoadingPanel.setVisible(false);
        DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
        dtm.setRowCount(0);

        but_TrnSearch.setEnabled(true);

        but_TrnHold.setVisible(true);

        but_TrnSave.setEnabled(true);
        but_TrnUpdate.setEnabled(false);
        but_TrnRefresh.setEnabled(true);

        but_TrnPrint.setEnabled(false);
        but_TrnPrint.setVisible(false);
        but_TrnCancel.setEnabled(false);
        but_TrnCancel.setVisible(false);

        txt_TrnNo.grabFocus();

        JComponent[] dis = {but_TrnUpdate};
        JComponent[] enb = {txt_TrnNo, but_TrnHold, but_TrnSearch, but_Add, but_TrnRefresh, but_ItemSearch, txt_DateSelector, cmb_Sup, cmb_Cus, cmb_SourceLoc, cmb_DestLoc, txt_RefTrn, txt_RefNo, txt_RefNo2, txt_LItemCode, txt_LCost, txt_LSell, txt_LQty, cmb_LUnit, txt_LDisPer, txt_LDisAmt, txt_LAmt, but_Add, tblTrn};
        setDisableEnableComponents(enb, dis);

        createTrnWindow();
    }

    public void setShortCutKeys(JInternalFrame f) {

        String exit = "exit";
        InputMap inputMap0 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap0.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), exit);
        ActionMap actionMap0 = f.getRootPane().getActionMap();
        actionMap0.put(exit, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                exit();
            }

        }
        );

        String Search = "Search";
        InputMap inputMap1 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap1.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), Search);
        ActionMap actionMap1 = f.getRootPane().getActionMap();
        actionMap1.put(Search, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SearchMode();
            }

        }
        );

        String Save = "Save";
        InputMap inputMap2 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap2.put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), Save);
        ActionMap actionMap2 = f.getRootPane().getActionMap();
        actionMap2.put(Save, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SaveProcess();
            }

        }
        );

        String Edit = "Edit";
        InputMap inputMap3 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap3.put(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), Edit);
        ActionMap actionMap3 = f.getRootPane().getActionMap();
        actionMap3.put(Edit, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                EditMode();
            }

        }
        );

        String Refresh = "Refresh";
        InputMap inputMap4 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap4.put(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), Refresh);
        ActionMap actionMap4 = f.getRootPane().getActionMap();
        actionMap4.put(Refresh, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                Refresh();
            }

        }
        );

        String ItemSearch = "ItemSearch";
        InputMap inputMap5 = txt_LItemCode.getInputMap(JComponent.WHEN_FOCUSED);
        inputMap5.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), ItemSearch);
        ActionMap actionMap5 = txt_LItemCode.getActionMap();
        actionMap5.put(ItemSearch, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SearchModeItem();
            }

        }
        );

        String TrnSearch = "TrnSearch";
        InputMap inputMap6 = txt_TrnNo.getInputMap(JComponent.WHEN_FOCUSED);
        inputMap6.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), TrnSearch);
        ActionMap actionMap6 = txt_TrnNo.getActionMap();
        actionMap6.put(TrnSearch, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                SearchMode();
            }

        }
        );

        String TrnHold = "TrnHold";
        InputMap inputMap7 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap7.put(KeyStroke.getKeyStroke(KeyEvent.VK_F6, 0), TrnHold);
        ActionMap actionMap7 = f.getRootPane().getActionMap();
        actionMap7.put(TrnHold, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                HoldProcess();
            }

        }
        );

        String TrnLineRemove = "TrnLineRemove";
        InputMap inputMap8 = tblTrn.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap8.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), TrnLineRemove);
        ActionMap actionMap8 = tblTrn.getActionMap();
        actionMap8.put(TrnLineRemove, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                removeSelectedLine();
            }

        }
        );

        String TrnCancel = "TrnCancel";
        InputMap inputMap9 = f.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap9.put(KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0), TrnCancel);
        ActionMap actionMap9 = f.getRootPane().getActionMap();
        actionMap9.put(TrnCancel, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                cancelTrn();
            }

        }
        );

    }

    private void removeSelectedLine() {
        int selectedRow = tblTrn.getSelectedRow();
        if (selectedRow > -1) {
            int res = JOptionPane.showConfirmDialog(rootPane, "Do you want to remove selected Line? (Line No:" + (selectedRow + 1) + ")", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (res == JOptionPane.YES_OPTION) {
                DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
                dtm.removeRow(selectedRow);
                CalculateTotal();
                txt_LItemCode.grabFocus();
            }
        }
    }

    private void exit() {

        try {
            this.setClosed(true);
            mainW.CurrentFrame = "";

        } catch (PropertyVetoException ex) {
            Logger.getLogger(Frm_TCommonTrn.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void setDisableEnableComponents(JComponent[] EnComlist, JComponent[] DisComlist) {
        for (JComponent c : DisComlist) {
            c.setEnabled(false);
        }
        for (JComponent c : EnComlist) {
            c.setEnabled(true);
        }

    }

    @Override
    public void SearchMode() {
        if (but_TrnSearch.isEnabled()) {

            Vector<String> col = new Vector<>();
            col.add("Code");
            col.add("State");
            col.add("CR Date");
            col.add("MD Date");
            String[] SQL_Col = {"ID", "STATE", "CRDATE", "MDDATE"};
            String SQL = "select ID,IF (TRNSTATE='H','HOLD', IF(TRNSTATE='P','PROCESSED','CANCELLED')) AS STATE,CRDATE,MDDATE from T_STOCKMST ";

            String SQLWhere = "   TRNTYPE='" + TrnSetup.getTrntype() + "' AND ";
            String SQLEnd = " ORDER BY MDDATE desc LIMIT 100 ";

            Connection currentCon = null;
            try {
                currentCon = DB.getCurrentCon();
            } catch (Exception ex) {
                Logger.getLogger(Frm_MItems.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ft == null) {

                ft = new Frm_Table(this, true, txt_TrnNo, currentCon, col, SQL_Col, SQL, SQLWhere, SQLEnd);
                ft.setVisible(true);

            } else {
                ft = null;
                ft = new Frm_Table(this, true, txt_TrnNo, currentCon, col, SQL_Col, SQL, SQLWhere, SQLEnd);
                ft.setFocusable(true);
                ft.setVisible(true);
            }

        }
    }

    public void SearchModeItem() {

        MLocation L = (MLocation) cmb_SourceLoc.getSelectedItem();

        if (TrnSetup.getSupplier() == 1 && TrnSetup.getSupPrdOnly() == 1) {

        } else {

            Vector<String> col = new Vector<>();
            col.add("Code");
            col.add("Description");
            col.add("Selling Price");

             String SQL="";
            ArrayList<String> SQL_Col = new ArrayList();
            if (TrnSetup.getCprice() == 1) {
                col.add("Cost Price");
                SQL_Col.add("P.ID");
                SQL_Col.add("P.NAME");
                 SQL_Col.add("S.SELLP");
                SQL_Col.add("S.COSTP");
                 SQL= "select P.ID,P.NAME,S.SELLP,S.COSTP from M_PRODUCTS P INNER JOIN m_stocks S ON P.ID=S.M_PRODUCTS_ID  ";
            }else{
                  SQL_Col.add("P.ID");
                SQL_Col.add("P.NAME");
                SQL_Col.add("S.SELLP");
                 SQL= "select P.ID,P.NAME,S.SELLP from M_PRODUCTS P INNER JOIN m_stocks S ON P.ID=S.M_PRODUCTS_ID  ";
            }

            
            String[] SQL_ar=new String[SQL_Col.size()];
            int i=0;
            for (String cold : SQL_Col) {
                
                SQL_ar[i]=cold;
                i++;
            }
            
            
           
            String SQLWhere = "";
            Connection currentCon = null;
            try {
                currentCon = DB.getCurrentCon();
            } catch (Exception ex) {
                Logger.getLogger(Frm_MItems.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ft == null) {

                ft = new Frm_Table(this, true, txt_LItemCode, currentCon, col, SQL_ar, SQL, SQLWhere);
                ft.setVisible(true);

            } else {
                ft = null;
                ft = new Frm_Table(this, true, txt_LItemCode, currentCon, col, SQL_ar, SQL, SQLWhere);
                ft.setFocusable(true);
                ft.setVisible(true);
            }
        }
    }

    private void createTrnWindow() {
        loadLocations();
        hideAllComponents();
        ArrangeTable();

        if (TrnSetup != null) {
            if (TrnSetup.getSupplier() == 1) {
                lbl_Sup.setVisible(true);
                cmb_Sup.setVisible(true);
            }
            if (TrnSetup.getCustomer() == 1) {
                lbl_Cus.setVisible(true);
                cmb_Cus.setVisible(true);
            }
            if (TrnSetup.getSourceloc() == 1) {
                lbl_SourceLoc.setVisible(true);
                cmb_SourceLoc.setVisible(true);
            }
            if (TrnSetup.getDestloc() == 1) {
                lbl_DestLoc.setVisible(true);
                cmb_DestLoc.setVisible(true);
            }
            if (TrnSetup.getDatechooser() == 1) {
                lbl_DateSelector.setVisible(true);
                txt_DateSelector.setVisible(true);
            }
            if (TrnSetup.getReftrntype() != null && !TrnSetup.getReftrntype().equals("")) {

                try {
                    UTransactions RefTrn = CTrnSetup.getTransactionConfig(TrnSetup.getReftrntype());
                    if (RefTrn != null) {
                        lbl_RefTrn.setText("<html><p>" + RefTrn.getTrndesc() + " No </p></html>");
                        lbl_RefTrn.setVisible(true);
                        txt_RefTrn.setVisible(true);
                    }
                } catch (Exception ex) {

                }

            }
            if (TrnSetup.getRefno() != null && !TrnSetup.getRefno().equals("")) {
                lbl_RefNo.setText("<html><p>" + TrnSetup.getRefno() + "</p></html>");
                lbl_RefNo.setVisible(true);
                txt_RefNo.setVisible(true);
            }
            if (TrnSetup.getRefno2() != null && !TrnSetup.getRefno2().equals("")) {
                lbl_RefNo2.setText("<html><p>" + TrnSetup.getRefno2() + "</p></html>");
                lbl_RefNo2.setVisible(true);
                txt_RefNo2.setVisible(true);
            }
            if (TrnSetup.getCprice() == 1) {

                lbl_LCost.setVisible(true);
                txt_LCost.setVisible(true);
            }
            if (TrnSetup.getSprice() == 1) {

                lbl_LSell.setVisible(true);
                txt_LSell.setVisible(true);
            }
            if (TrnSetup.getLinedisper() == 1) {

                lbl_LDisPer.setVisible(true);
                txt_LDisPer.setVisible(true);
            }
            if (TrnSetup.getLinedis() == 1) {

                lbl_LDisAmt.setVisible(true);
                txt_LDisAmt.setVisible(true);
            }

            switch (TrnSetup.getDefprice()) {
                case "C":
                    txt_LCost.setEditable(TrnSetup.getChgdefprice() == 1 ? true : false);
                    break;
                case "S":
                    txt_LSell.setEditable(TrnSetup.getChgdefprice() == 1 ? true : false);
                    break;
                default:
                    txt_LCost.setEditable(false);
                    txt_LSell.setEditable(false);
                    break;
            }

        }

    }

    private void ArrangeTable() {
        //Hide Unit 
        int unitindex = 6;
        tblTrn.getColumnModel().getColumn(unitindex).setMinWidth(0);
        tblTrn.getColumnModel().getColumn(unitindex).setMaxWidth(0);
        tblTrn.getColumnModel().getColumn(unitindex).setWidth(0);

        //Hide Batch
        int batchindex = 10;
        tblTrn.getColumnModel().getColumn(batchindex).setMinWidth(0);
        tblTrn.getColumnModel().getColumn(batchindex).setMaxWidth(0);
        tblTrn.getColumnModel().getColumn(batchindex).setWidth(0);

        //Hide colour column
        int ColourColindex = 11;
        tblTrn.getColumnModel().getColumn(ColourColindex).setMinWidth(0);
        tblTrn.getColumnModel().getColumn(ColourColindex).setMaxWidth(0);
        tblTrn.getColumnModel().getColumn(ColourColindex).setWidth(0);

        int GVColindex = 12;
        tblTrn.getColumnModel().getColumn(GVColindex).setMinWidth(0);
        tblTrn.getColumnModel().getColumn(GVColindex).setMaxWidth(0);
        tblTrn.getColumnModel().getColumn(GVColindex).setWidth(0);

        int IsRetColindex = 13;
        tblTrn.getColumnModel().getColumn(IsRetColindex).setMinWidth(0);
        tblTrn.getColumnModel().getColumn(IsRetColindex).setMaxWidth(0);
        tblTrn.getColumnModel().getColumn(IsRetColindex).setWidth(0);

        if (TrnSetup.getCprice() == 0) {
            //tblTrn.removeColumn(tblTrn.getColumnModel().getColumn(2)); 
            int colindex = 2;
            tblTrn.getColumnModel().getColumn(colindex).setMinWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setMaxWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setWidth(0);
        }
        if (TrnSetup.getSprice() == 0) {
            //   tblTrn.removeColumn(tblTrn.getColumnModel().getColumn(3)); 
            int colindex = 3;
            tblTrn.getColumnModel().getColumn(colindex).setMinWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setMaxWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setWidth(0);
        }
        if (TrnSetup.getLinedisper() == 0) {
            // tblTrn.removeColumn(tblTrn.getColumnModel().getColumn(5)); 
            int colindex = 7;
            tblTrn.getColumnModel().getColumn(colindex).setMinWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setMaxWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setWidth(0);
        }
        if (TrnSetup.getLinedis() == 0) {
            // tblTrn.removeColumn(tblTrn.getColumnModel().getColumn(6)); 
            int colindex = 8;
            tblTrn.getColumnModel().getColumn(colindex).setMinWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setMaxWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setWidth(0);
        }

        if (TrnSetup.getDisplayunit() == 0) {
            // tblTrn.removeColumn(tblTrn.getColumnModel().getColumn(6)); 
            int colindex = 5;
            tblTrn.getColumnModel().getColumn(colindex).setMinWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setMaxWidth(0);
            tblTrn.getColumnModel().getColumn(colindex).setWidth(0);
        }
    }

    private void hideAllComponents() {
        lbl_Sup.setVisible(false);
        cmb_Sup.setVisible(false);
        lbl_Cus.setVisible(false);
        cmb_Cus.setVisible(false);
        lbl_SourceLoc.setVisible(false);
        cmb_SourceLoc.setVisible(false);
        lbl_DestLoc.setVisible(false);
        cmb_DestLoc.setVisible(false);
        lbl_DateSelector.setVisible(false);
        txt_DateSelector.setVisible(false);
        lbl_RefTrn.setVisible(false);
        txt_RefTrn.setVisible(false);
        lbl_RefNo.setVisible(false);
        txt_RefNo.setVisible(false);
        lbl_RefNo2.setVisible(false);
        txt_RefNo2.setVisible(false);

        lbl_LCost.setVisible(false);
        txt_LCost.setVisible(false);
        lbl_LSell.setVisible(false);
        txt_LSell.setVisible(false);
        lbl_LDisPer.setVisible(false);
        txt_LDisPer.setVisible(false);
        lbl_LDisAmt.setVisible(false);
        txt_LDisAmt.setVisible(false);

    }

    /*  TABLE OPERATIONS */
    private void addToTable() {
        try {

            if (doAddLineValidation()) {

                String ProCode = txt_LItemCode.getText();

                MProducts product = C_Pro.getProduct(ProCode);

                String Des = txt_LProDes.getText();
                double CPrice = Double.parseDouble(txt_LCost.getText());
                double SPrice = Double.parseDouble(txt_LSell.getText());
                double Qty = Double.parseDouble(txt_LQty.getText());
                double LDisPer = txt_LDisPer.getText().equals("") ? 0 : Double.parseDouble(txt_LDisPer.getText());
                double LDisAmt = txt_LDisAmt.getText().equals("") ? 0 : Double.parseDouble(txt_LDisAmt.getText());
                MUnits Unit = (MUnits) cmb_LUnit.getSelectedItem();
                String UnitSym = Unit.getSymble();
                String Batch = txt_LBatch.getText();

                try {
                    double CheckExists = CheckExists(ProCode);
                    Qty = CheckExists + Qty;
                } catch (Exception e) {

                }

                MUnits u = (MUnits) cmb_LUnit.getSelectedItem();
                double unitConversion = C_Pro.getUnitConversion(txt_LItemCode.getText(), u.getId());

                double EfectPrice = 0;

                switch (TrnSetup.getDefprice()) {
                    case "C":
                        EfectPrice = CPrice;
                        break;
                    case "S":
                        EfectPrice = SPrice;
                        break;
                    default:
                        EfectPrice = SPrice;
                        break;
                }

                double GroLineAmt = fv.round(EfectPrice * fv.round((Qty / unitConversion), 3), 2);
                double FinalLineAmount = GroLineAmt - ((GroLineAmt * LDisPer / 100) + LDisAmt);

                DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
                Vector v = new Vector();
                v.add(ProCode);//0
                v.add(Des);//1
                v.add(CPrice);//2
                v.add(SPrice);//3
                v.add(Qty);//4
                v.add(UnitSym);//5
                v.add(Unit);//6

                v.add(LDisPer);//7
                v.add(LDisAmt);//8
                v.add(FinalLineAmount);//9
                v.add(Batch);//10
                int Colour = 0;
                if (TrnSetup.getBatchcreate() == 1) {
                    boolean CanBatchCreate = ((product.getCprice().equals(CPrice) == false) || (product.getSprice().equals(SPrice) == false)) ? true : false;
                    if (CanBatchCreate) {
                        Colour = 1;

                    }
                }

                v.add(Colour);//11
                v.add(0);//12
                v.add(0);//13(Return)

                if (txt_TrnNo.getText().length() > 0) {
                    dtm.addRow(v);

                    clearLine();
                    CalculateTotal();

                } else if (checkPermissions(v)) {
                    dtm.addRow(v);

                    clearLine();
                    CalculateTotal();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        }

    }

    private double CheckExists(String Code) throws Exception {
        DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
        double qty = 0;
        boolean state = false;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            String proCode = dtm.getValueAt(i, 0).toString();
            if (proCode.equals(Code)) {
                qty = Double.parseDouble(dtm.getValueAt(i, 4).toString());
                dtm.removeRow(i);
                state = true;
                break;
            }
        }
        if (state == false) {
            throw new Exception("Avaialble");
        }
        return qty;
    }

    private void LoadLine(int index) {

        if (index > -1 && index < tblTrn.getRowCount()) {
            try {
                DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
                String ProCode = dtm.getValueAt(index, 0).toString();
                String ProDes = dtm.getValueAt(index, 1).toString();
                String ProCost = dtm.getValueAt(index, 2).toString();
                String ProSell = dtm.getValueAt(index, 3).toString();
                String ProQty = dtm.getValueAt(index, 4).toString();
                String unitSym = dtm.getValueAt(index, 5).toString();
                MUnits unit = (MUnits) dtm.getValueAt(index, 6);

                String ProDisPer = dtm.getValueAt(index, 7).toString();
                String ProDisAmt = dtm.getValueAt(index, 8).toString();
                String ProAmt = dtm.getValueAt(index, 9).toString();
                String Batch = dtm.getValueAt(index, 10).toString();
                txt_LItemCode.setText(ProCode);
                txt_LProDes.setText(ProDes);
                MProducts product = C_Pro.getProduct(ProCode);
                cmb_LUnit.setModel(new DefaultComboBoxModel(C_Units.getAllAssignUnitsVect(product.getUnitGroupId())));
                cmb_LUnit.setSelectedItem(unit);
                txt_LCost.setText(ProCost);
                txt_LSell.setText(ProSell);
                txt_LQty.setText(ProQty);
                // cmb_LUnit.setSelectedItem(unit);
                txt_LDisPer.setText(ProDisPer);
                txt_LDisAmt.setText(ProDisAmt);
                txt_LAmt.setText(ProAmt);
                txt_LBatch.setText(Batch);

                txt_LQty.grabFocus();
            } catch (Exception ex) {
                Logger.getLogger(Frm_TCommonTrn.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void CalculateLine() {
        try {

            double CPrice = Double.parseDouble(txt_LCost.getText());
            double SPrice = Double.parseDouble(txt_LSell.getText());
            double Qty = Double.parseDouble(txt_LQty.getText());
            double LDisPer = txt_LDisPer.getText().equals("") ? 0 : Double.parseDouble(txt_LDisPer.getText());
            double LDisAmt = txt_LDisAmt.getText().equals("") ? 0 : Double.parseDouble(txt_LDisAmt.getText());

            MUnits u = (MUnits) cmb_LUnit.getSelectedItem();
            double unitConversion = C_Pro.getUnitConversion(txt_LItemCode.getText(), u.getId());

            double EfectPrice = 0;

            switch (TrnSetup.getDefprice()) {
                case "C":
                    EfectPrice = CPrice;
                    break;
                case "S":
                    EfectPrice = SPrice;
                    break;
                default:
                    EfectPrice = SPrice;
                    break;
            }

            double GroLineAmt = fv.round(EfectPrice * fv.round((Qty / unitConversion), 3), 2);

            double FinalLineAmount = GroLineAmt - ((GroLineAmt * LDisPer / 100) + LDisAmt);
            txt_LAmt.setText("" + FinalLineAmount);
        } catch (Exception ex) {
            txt_LAmt.setText("0.0");
        }
    }

    private void clearLine() {
        txt_LItemCode.setText("");
        txt_LProDes.setText("");
        txt_LCost.setText("0.0");
        txt_LSell.setText("0.0");
        txt_LQty.setText("0.0");
        txt_LDisPer.setText("0.0");
        txt_LDisAmt.setText("0.0");
        txt_LAmt.setText("0.0");
        txt_LBatch.setText("");
        cmb_LUnit.setModel(new DefaultComboBoxModel(new Vector()));

        lbl_LCost.setText("Cost");
        lbl_LSell.setText("Sell");

        txt_LItemCode.grabFocus();
    }

    private boolean doAddLineValidation() throws Exception {
        boolean state = true;

        if (C_Pro.getProduct(txt_LItemCode.getText(), 1) == null) {
            state = false;
            throw new Exception("Need Item valid Code");
        } else if (TrnSetup.getCprice() == 1 && txt_LCost.getText().equals("")) {
            state = false;
            throw new Exception("Need a Cost Price");
        } else if (TrnSetup.getSprice() == 1 && txt_LSell.getText().equals("")) {
            state = false;
            throw new Exception("Need a Selling Price");
        } else if (txt_LQty.getText().equals("")) {
            state = false;
            throw new Exception("Need to fill Quantity");
        } else if (cmb_LUnit.getSelectedIndex() == -1) {
            state = false;
            throw new Exception("Select Unit");
        } else if (txt_TrnNo.getText().length() > 0) {
            TStockmst stockHed = C_TrnCom.getStockHed(txt_TrnNo.getText(), TrnSetup);
            if (stockHed == null) {
                state = false;
                throw new Exception("Invalid Transaction No");
            }
        } else if (Double.parseDouble(txt_LQty.getText()) == 0) {
            state = false;
            throw new Exception("Quantity Cannot be Zero");
        }

        return state;
    }

    private void loadProduct() {
        try {
            if (!txt_LItemCode.getText().equals("")) {
                String ProCode = txt_LItemCode.getText();

                MProducts product = C_Pro.getProduct(ProCode, 1);
                if (product != null) {

                    String Des = product.getName();

                    double CPrice = product.getCprice();

                    double SPrice = product.getSprice();
                    String Batch = "";
                    if (TrnSetup.getBatchcreate() == 0 && product.getBatch() == 1) {
                        MLocation Loc = (MLocation) cmb_SourceLoc.getSelectedItem();
                        MStocks stk = Frm_MBatchPopUp.createBatchPopUp(mainW, ProCode, Loc.getId().toString());
                        if (stk != null) {
                            CPrice = stk.getCostPrice();
                            SPrice = stk.getSellPrice();
                            Batch = stk.getBatchNo();
                        }
                    }

                    txt_LBatch.setText(Batch);
                    txt_LProDes.setText(Des);
                    txt_LCost.setText("" + CPrice);
                    txt_LSell.setText("" + SPrice);
                    cmb_LUnit.setModel(new DefaultComboBoxModel(C_Units.getAllAssignUnitsVect(product.getUnitGroupId())));

                    lbl_LCost.setText("Cost[1 " + C_Units.getBaseUnitIdObj(product.getUnitGroupId()).getSymble() + "]");
                    lbl_LSell.setText("Sell[1 " + C_Units.getBaseUnitIdObj(product.getUnitGroupId()).getSymble() + "]");

                    txt_LQty.setText("1");
                    txt_LQty.grabFocus();
                } else {
                    clearLine();
                    throw new Exception("Can`t find active product for  Code " + ProCode + "");

                }

            } else {
                txt_LItemCode.grabFocus();
                clearLine();
                throw new Exception("Need a Item Code");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        }
    }

    private void CalculateTotal() {
        DefaultTableModel dtm = (DefaultTableModel) tblTrn.getModel();
        double Amount = 0;

        for (int i = 0; i < dtm.getRowCount(); i++) {
            Amount += Double.parseDouble(dtm.getValueAt(i, 9).toString());
        }

        txt_FSubTot.setText("" + cf.getValueWithComma(Amount));
        double DisPer = txt_FNetDis.getText().equals("") ? 0.0 : Double.parseDouble(txt_FNetDis.getText());
        double NetAmt = Amount - (Amount * DisPer / 100);
        txt_FAmount.setText("" + cf.getValueWithComma(NetAmt));

    }

    private void loadLocations() {
        try {
            cmb_DestLoc.setModel(new DefaultComboBoxModel(C_Loc.getAllLocationsV()));
            cmb_SourceLoc.setModel(new DefaultComboBoxModel(C_Loc.getAllLocationsV()));
            cmb_Sup.setModel(new DefaultComboBoxModel(C_Sup.getAllSuppliers()));
            cmb_Cus.setModel(new DefaultComboBoxModel(C_Cus.getAllCustomers()));
        } catch (Exception ex) {

        }
    }

    private boolean doFormValidations() {
        boolean state = true;
        try {
            if (TrnSetup.getSupplier() == 1 && cmb_Sup.getSelectedIndex() == -1) {
                state = false;
                throw new Exception("Please select a supplier");
            } else if (TrnSetup.getCustomer() == 1 && cmb_Cus.getSelectedIndex() == -1) {
                state = false;
                throw new Exception("Please select a Customer");
            } else if (TrnSetup.getSourceloc() == 1 && cmb_SourceLoc.getSelectedIndex() == -1) {
                state = false;
                throw new Exception("Please select a Source/From Location");
            } else if (TrnSetup.getDestloc() == 1 && cmb_DestLoc.getSelectedIndex() == -1) {
                state = false;
                throw new Exception("Please select a Destination/To Location");
            } else if (TrnSetup.getDatechooser() == 1 && txt_DateSelector.getDate() == null) {
                state = false;
                throw new Exception("Please select Date");
            } else if (!TrnSetup.getReftrntype().equals("") && txt_RefTrn.getText().equals("")) {
                state = false;
                throw new Exception("Fill Reference trnasaction No");
            } else if (tblTrn.getRowCount() == 0) {
                state = false;
                throw new Exception("Please add items to table ");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

        }
        return state;

    }

    private void SetFocusTraversal() {
        focusList = getFocustOrder();
        //tab key order
        this.setFocusTraversalPolicy(new MyFocusTraversalPolicy(focusNumber, focusList));
        try {
            KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {
                @Override
                public boolean dispatchKeyEvent(KeyEvent ke) {
                    if (ke.getID() == KeyEvent.KEY_PRESSED) {
                        if (ke.getKeyCode() == KeyEvent.VK_TAB) {
                            Component comp = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();

                            if (comp.isEnabled() == false) {
                                if (ke.isShiftDown()) {
                                    KeyboardFocusManager.getCurrentKeyboardFocusManager().focusPreviousComponent();
                                } else {
                                    KeyboardFocusManager.getCurrentKeyboardFocusManager().focusNextComponent();
                                }
                            }
                        }
                    }
                    return false;
                }
            });
        } catch (Exception e) {
            System.err.println("Exception in product Search Window Exception:" + e);
        }

    }

    private JComponent[] getFocustOrder() {
        ArrayList<JComponent> ar = new ArrayList<>();
        ar.add(txt_TrnNo);
        if (cmb_Sup.isVisible()) {
            ar.add(cmb_Sup);
        }
        if (cmb_Cus.isVisible()) {
            ar.add(cmb_Cus);
        }
        if (txt_DateSelector.isVisible()) {
            ar.add(txt_DateSelector);
        }
        if (cmb_SourceLoc.isVisible()) {
            ar.add(cmb_SourceLoc);
        }
        if (cmb_DestLoc.isVisible()) {
            ar.add(cmb_DestLoc);
        }
        if (txt_LItemCode.isVisible()) {
            ar.add(txt_LItemCode);
        }
        if (txt_LCost.isVisible() && txt_LCost.isEditable()) {
            ar.add(txt_LCost);
        }
        if (txt_LSell.isVisible() && txt_LSell.isEditable()) {
            ar.add(txt_LSell);
        }
        if (txt_LQty.isVisible()) {
            ar.add(txt_LQty);
        }
        if (cmb_LUnit.isVisible()) {
            ar.add(cmb_LUnit);
        }
        if (txt_LDisPer.isVisible()) {
            ar.add(txt_LDisPer);
        }
        if (txt_LDisAmt.isVisible()) {
            ar.add(txt_LDisAmt);
        }
        if (txt_LAmt.isVisible()) {
            ar.add(txt_LAmt);
        }
        if (txt_LItemCode.isVisible()) {
            ar.add(txt_LItemCode);
        }

        JComponent[] arOrd = new JComponent[ar.size()];
        for (int i = 0; i < ar.size(); i++) {
            arOrd[i] = ar.get(i);
        }

        return arOrd;

    }

    private void loadTransaction() {
        if (!txt_TrnNo.getText().equals("")) {
            try {
                String TrnNo = txt_TrnNo.getText();
                Refresh();
                txt_TrnNo.setText(TrnNo);
                TStockmst stockHed = C_TrnCom.getStockHed(TrnNo, TrnSetup);

                txt_DateSelector.setVisible(true);
                txt_DateSelector.setEnabled(false);
                txt_DateSelector.setDate(stockHed.getEftDate());

                but_TrnPrint.setVisible(true);

                if (TrnSetup != null) {
                    if (TrnSetup.getSupplier() == 1) {
                        cmb_Sup.setSelectedItem(stockHed.getMSupplier());
                    }
                    if (TrnSetup.getCustomer() == 1) {
                        cmb_Cus.setSelectedItem(stockHed.getMCustomer());
                    }
                    if (TrnSetup.getSourceloc() == 1) {
                        cmb_SourceLoc.setSelectedItem(stockHed.getMLocationByMLocationSource());
                    }
                    if (TrnSetup.getDestloc() == 1) {
                        cmb_DestLoc.setSelectedItem(stockHed.getMLocationByMLocationDest());
                    }
                    if (TrnSetup.getDatechooser() == 1) {
                        txt_DateSelector.setEnabled(true);
                    }
                    if (TrnSetup.getReftrntype() != null && !TrnSetup.getReftrntype().equals("")) {
                        txt_RefTrn.setText(stockHed.getRefTrnNo());
                    }
                    if (TrnSetup.getRefno() != null && !TrnSetup.getRefno().equals("")) {
                        txt_RefNo.setText(stockHed.getRefno());
                    }
                    if (TrnSetup.getRefno2() != null && !TrnSetup.getRefno2().equals("")) {
                        txt_RefNo2.setText(stockHed.getRefno2());
                    }

                    if (stockHed.getTrnstate().equals("C")) {
                        txt_State.setForeground(Color.red);
                        txt_State.setText("**CANCELLED**");

                        // but_TrnHold.setEnabled(false);
                        but_TrnHold.setVisible(false);
                        but_TrnCancel.setEnabled(false);
                        but_TrnCancel.setVisible(false);

                        but_TrnSave.setEnabled(false);

                    }
                    if (stockHed.getTrnstate().equals("P")) {
                        //  but_TrnHold.setEnabled(false);
                        but_TrnHold.setVisible(false);

                        but_TrnSave.setEnabled(false);

                        if (TrnSetup.getCancelOpt() == 1) {
                            but_TrnCancel.setEnabled(true);
                            but_TrnCancel.setVisible(true);
                        }

                        txt_State.setForeground(Color.BLUE);
                        txt_State.setText("**PROCESSED**");
                    }
                    if (stockHed.getTrnstate().equals("H")) {
                        //  but_TrnHold.setEnabled(true);
                        but_TrnHold.setVisible(true);
                        but_TrnUpdate.setEnabled(true);

                        if (TrnSetup.getCancelOpt() == 1) {
                            but_TrnCancel.setEnabled(true);
                            but_TrnCancel.setVisible(true);
                        }

                        txt_State.setForeground(Color.WHITE);
                        txt_State.setText("**HOLD**");
                    }

                    ArrayList<TStockline> arLine = C_TrnCom.getStockLine(TrnNo, TrnSetup);

                    for (TStockline tStockline : arLine) {
                        txt_LItemCode.setText(tStockline.getProId());
                        txt_LProDes.setText(tStockline.getProname());
                        txt_LBatch.setText(tStockline.getBatch());
                        txt_LCost.setText(tStockline.getCprice().toString());
                        txt_LSell.setText(tStockline.getSprice().toString());
                        txt_LQty.setText(tStockline.getQty().toString());

                        cmb_LUnit.setModel(new DefaultComboBoxModel(C_Units.getAllAssignUnitsVect(tStockline.getUnitGroupId())));

                        cmb_LUnit.setSelectedItem(C_Units.getUnit(tStockline.getUnitId()));
                        txt_LDisAmt.setText(tStockline.getLdis().toString());
                        txt_LDisPer.setText(tStockline.getLdisper().toString());
                        txt_LAmt.setText(tStockline.getAmount().toString());
                        txt_LBatch.setText(tStockline.getBatch());

                        addToTable();

                    }

                }

                CalculateTotal();

                JComponent[] enb = {but_TrnRefresh, but_TrnPrint};
                JComponent[] dis = {txt_TrnNo, but_TrnHold, but_TrnSearch, but_TrnSave, but_Add, but_ItemSearch, txt_DateSelector, cmb_Sup, cmb_Cus, cmb_SourceLoc, cmb_DestLoc, txt_RefTrn, txt_RefNo, txt_RefNo2, txt_LItemCode, txt_LCost, txt_LSell, txt_LQty, cmb_LUnit, txt_LDisPer, txt_LDisAmt, txt_LAmt, but_Add, tblTrn};
                setDisableEnableComponents(enb, dis);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

            }
        }

    }

    private boolean checkPermissions(Vector v) throws Exception {
        boolean state = true;
        if (Double.parseDouble(v.get(7).toString()) > 0 || Double.parseDouble(v.get(8).toString()) > 0) {
            if (Double.parseDouble(v.get(7).toString()) > 0) { //Dis Per %
                MPermissions p = GLOBALDATA.GlobalData.SpecialPer.get("P00023");
                if (p != null) {
                    state = true;
                } else {
                    state = Frm_PermissionsPopup.createPermissionPopUp(mainW, true, "P00023");
                }
            } else if (Double.parseDouble(v.get(8).toString()) > 0) {//Dis Amt
                MPermissions p = GLOBALDATA.GlobalData.SpecialPer.get("P00024");
                if (p != null) {
                    state = true;
                } else {
                    state = Frm_PermissionsPopup.createPermissionPopUp(mainW, true, "P00024");
                }
            }
        }
        return state;
    }

    private void cancelTrn() {
        if (but_TrnCancel.isEnabled()) {
            if (txt_TrnNo.getText().length() > 0) {
                try {
                    TStockmst stockHed = C_TrnCom.getStockHed(txt_TrnNo.getText(), TrnSetup);
                    if (stockHed != null) {
                        if (stockHed.getTrnstate().equals("P") || stockHed.getTrnstate().equals("H")) {
                            C_TrnCom.CancelStock(stockHed, TrnSetup);
                            JOptionPane.showMessageDialog(rootPane, TrnSetup.getTrndesc() + " No [" + stockHed.getId() + "] is sucessfully cancelled", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.INFORMATION_MESSAGE);
                            Refresh();
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, e.getMessage(), GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);
                }

            }

        }

    }

    private void printTrn() {
        if (txt_TrnNo.getText().length() > 0) {
            try {
                //layout_LoadingPanel.setVisible(true);

                TStockmst stockHed = C_TrnCom.getStockHed(txt_TrnNo.getText(), TrnSetup);
                if (stockHed != null) {
                    String txt = stockHed.getTrnstate().equals("C") ? "**CANCELLED**" : (stockHed.getTrnstate().equals("H") ? "**HOLD**" : "");
                    if (jr != null) {
                        C_Report.printFromDB_Trn(jr, stockHed.getId(), TrnSetup, true, txt, true);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, TrnSetup.getTrndesc() + " Report Not Avialable", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

                    }

                }

            } catch (Exception e) {
                // layout_LoadingPanel.setVisible(false);
                JOptionPane.showMessageDialog(rootPane, "<p>" + e.getMessage() + "</p>", GLOBALDATA.GlobalData.MESSAGEBOX, JOptionPane.ERROR_MESSAGE);

            } finally {
                //  layout_LoadingPanel.setVisible(false);
            }

        }

    }

    private void CompileReport() {

        jr = GLOBALDATA.GlobalData.CompiledReports.get("RPT_" + TrnSetup.getTrnno());

    }

}
